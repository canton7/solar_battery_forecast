# Generated by ariadne-codegen
# Source: custom_components/solar_battery_forecast/octopus_api/queries.graphql

from typing import Annotated, Any, List, Literal, Optional, Union

from pydantic import Field

from .base_model import BaseModel
from .enums import ElectricityMeterMeterType


class AccountQuery(BaseModel):
    account: Optional["AccountQueryAccount"]


class AccountQueryAccount(BaseModel):
    electricity_agreements: Optional[
        List[Optional["AccountQueryAccountElectricityAgreements"]]
    ] = Field(alias="electricityAgreements")


class AccountQueryAccountElectricityAgreements(BaseModel):
    tariff: Optional[
        Annotated[
            Union[
                "AccountQueryAccountElectricityAgreementsTariffStandardTariff",
                "AccountQueryAccountElectricityAgreementsTariffDayNightTariff",
                "AccountQueryAccountElectricityAgreementsTariffThreeRateTariff",
                "AccountQueryAccountElectricityAgreementsTariffHalfHourlyTariff",
                "AccountQueryAccountElectricityAgreementsTariffPrepayTariff",
            ],
            Field(discriminator="typename__"),
        ]
    ]
    meter_point: "AccountQueryAccountElectricityAgreementsMeterPoint" = Field(
        alias="meterPoint"
    )


class AccountQueryAccountElectricityAgreementsTariffStandardTariff(BaseModel):
    typename__: Literal["StandardTariff"] = Field(alias="__typename")


class AccountQueryAccountElectricityAgreementsTariffDayNightTariff(BaseModel):
    typename__: Literal["DayNightTariff"] = Field(alias="__typename")


class AccountQueryAccountElectricityAgreementsTariffThreeRateTariff(BaseModel):
    typename__: Literal["ThreeRateTariff"] = Field(alias="__typename")


class AccountQueryAccountElectricityAgreementsTariffHalfHourlyTariff(BaseModel):
    typename__: Literal["HalfHourlyTariff"] = Field(alias="__typename")
    id: Optional[str]
    unit_rates: Optional[
        List[
            Optional[
                "AccountQueryAccountElectricityAgreementsTariffHalfHourlyTariffUnitRates"
            ]
        ]
    ] = Field(alias="unitRates")


class AccountQueryAccountElectricityAgreementsTariffHalfHourlyTariffUnitRates(
    BaseModel
):
    value: Optional[float]
    valid_to: Optional[Any] = Field(alias="validTo")
    valid_from: Optional[Any] = Field(alias="validFrom")


class AccountQueryAccountElectricityAgreementsTariffPrepayTariff(BaseModel):
    typename__: Literal["PrepayTariff"] = Field(alias="__typename")


class AccountQueryAccountElectricityAgreementsMeterPoint(BaseModel):
    meters: Optional[
        List[Optional["AccountQueryAccountElectricityAgreementsMeterPointMeters"]]
    ]


class AccountQueryAccountElectricityAgreementsMeterPointMeters(BaseModel):
    meter_type: Optional[ElectricityMeterMeterType] = Field(alias="meterType")
    smart_export_electricity_meter: Optional[
        "AccountQueryAccountElectricityAgreementsMeterPointMetersSmartExportElectricityMeter"
    ] = Field(alias="smartExportElectricityMeter")
    smart_import_electricity_meter: Optional[
        "AccountQueryAccountElectricityAgreementsMeterPointMetersSmartImportElectricityMeter"
    ] = Field(alias="smartImportElectricityMeter")


class AccountQueryAccountElectricityAgreementsMeterPointMetersSmartExportElectricityMeter(
    BaseModel
):
    device_id: str = Field(alias="deviceId")


class AccountQueryAccountElectricityAgreementsMeterPointMetersSmartImportElectricityMeter(
    BaseModel
):
    device_id: str = Field(alias="deviceId")
