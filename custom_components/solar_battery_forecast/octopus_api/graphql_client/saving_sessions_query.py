# Generated by ariadne-codegen
# Source: custom_components/solar_battery_forecast/octopus_api/queries.graphql

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel


class SavingSessionsQuery(BaseModel):
    saving_sessions: Optional["SavingSessionsQuerySavingSessions"] = Field(
        alias="savingSessions"
    )


class SavingSessionsQuerySavingSessions(BaseModel):
    events: Optional[List[Optional["SavingSessionsQuerySavingSessionsEvents"]]]
    account: Optional["SavingSessionsQuerySavingSessionsAccount"]


class SavingSessionsQuerySavingSessionsEvents(BaseModel):
    id: Optional[int]
    start_at: Optional[Any] = Field(alias="startAt")
    end_at: Optional[Any] = Field(alias="endAt")
    reward_per_kwh_in_octo_points: Optional[int] = Field(
        alias="rewardPerKwhInOctoPoints"
    )


class SavingSessionsQuerySavingSessionsAccount(BaseModel):
    has_joined_campaign: Optional[bool] = Field(alias="hasJoinedCampaign")
    joined_events: Optional[
        List[Optional["SavingSessionsQuerySavingSessionsAccountJoinedEvents"]]
    ] = Field(alias="joinedEvents")


class SavingSessionsQuerySavingSessionsAccountJoinedEvents(BaseModel):
    event_id: Optional[int] = Field(alias="eventId")


SavingSessionsQuery.model_rebuild()
SavingSessionsQuerySavingSessions.model_rebuild()
SavingSessionsQuerySavingSessionsAccount.model_rebuild()
