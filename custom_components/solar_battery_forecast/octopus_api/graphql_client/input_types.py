# Generated by ariadne-codegen on 2024-03-01 12:15
# Source: https://api.octopus.energy/v1/graphql/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccountCreditReasonType,
    AccountReminderTypes,
    AccountTypeChoices,
    APIExceptionCategories,
    APIExceptionPriority,
    APIExceptionResolutionStatus,
    APIExceptionResolutionType,
    APIExceptionTags,
    AppointmentStatus,
    BlackBoxMeterAmpChoices,
    CableFromMeterToChargePointChoices,
    Category,
    CertificateType,
    ChargePointInstallationChoices,
    CHFConnectionMethod,
    CHFFaultReason,
    CHFFaultReturnType,
    CHFInstallType,
    CHFLocation,
    CHFNoFaultReturnType,
    CollectionMethod,
    CommsDeliveryPreference,
    CommsHubStatusUpdateType,
    CommsStrategyType,
    CurrentQualifyingComponentOptions,
    DistanceFromMeterToChargePointChoices,
    DNOStatus,
    ElectricityMeterTypes,
    ElectricitySupplyType,
    EVChargerTypes,
    ExportTechnologyType,
    ExternalAccountEventCategory,
    ExternalAccountEventContentType,
    ExternalAccountEventSubCategory,
    FITStatus,
    FormType,
    FuelType,
    FuelTypeChoices,
    GasMeterTypes,
    GasSupplyType,
    HeatPumpHeatType,
    HeatPumpPropertyType,
    InkCommunicationChannel,
    Interval,
    JoinConsumerDeviceChoices,
    KrakenFlexDeviceTypes,
    LinkedObjectType,
    MeterLocationChoices,
    MeterStatus,
    MeterType,
    MeterTypeChoices,
    Mode,
    NewMeterCategory,
    NonBespokeElectricityRateTypeChoices,
    PaymentMethodChoices,
    PaymentType,
    PortfolioUserRoleEnum,
    PremiseType,
    PreSignedTokenScope,
    ProductRateBands,
    ProviderChoices,
    QualifyingCriteriaOptions,
    QuotePaymentMethodChoices,
    ReadingDirectionType,
    ReadingFrequencyType,
    ReadingQualityType,
    RemoveConsumerDeviceChoices,
    RequestableRepaymentMethod,
    SalesChannelChoices,
    SiteworksEventType,
    SmartMeterInterestChoices,
    SmartMeterInterestSourceChoices,
    SmartMeterReadingFrequencyChoices,
    SMETS2InterestReason,
    SupplyType,
    TaxUnitType,
    UtilityType,
    YesNoAnswer,
    YesNoIDontKnowAnswer,
    Zone,
)


class MetadataInput(BaseModel):
    identifier: str
    linked_object_type: LinkedObjectType = Field(alias="linkedObjectType")
    key: str
    value: Any


class BackendScreenParamInputType(BaseModel):
    key: str
    value: str


class APIExceptionQueryInput(BaseModel):
    external_identifier: Optional[str] = Field(alias="externalIdentifier")
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus"
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType"
    )
    channel: Optional[str]
    priority: Optional[APIExceptionPriority]
    tags: Optional[List[Optional[APIExceptionTags]]]
    category: Optional[APIExceptionCategories]
    account_number: Optional[str] = Field(alias="accountNumber")
    user_id: Optional[str] = Field(alias="userId")
    customer_contact: Optional[str] = Field(alias="customerContact")
    supply_point_identifier: Optional[str] = Field(alias="supplyPointIdentifier")


class AccountSearchInputType(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber")
    portfolio_number: Optional[str] = Field(alias="portfolioNumber")
    urn: Optional[str]
    user: Optional[str]
    account: Optional[str]
    statements: Optional[str]
    meter_serial_number: Optional[str] = Field(alias="meterSerialNumber")
    location: Optional[str]
    billing_name: Optional[str] = Field(alias="billingName")
    business_name: Optional[str] = Field(alias="businessName")
    business_number: Optional[str] = Field(alias="businessNumber")
    account_references: Optional[str] = Field(alias="accountReferences")
    mpan: Optional[str]
    mprn: Optional[str]
    telephone_number: Optional[str] = Field(alias="telephoneNumber")


class PublishTransactionalMessagingTriggerInput(BaseModel):
    trigger_type_code: str = Field(alias="triggerTypeCode")
    params: Any


class CreateContributionAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    scheme_code: str = Field(alias="schemeCode")
    interval: Interval
    amount: int
    active_from: Any = Field(alias="activeFrom")
    active_to: Optional[Any] = Field(alias="activeTo")


class EndContributionAgreementInput(BaseModel):
    contribution_agreement_id: str = Field(alias="contributionAgreementId")
    end_at: Optional[Any] = Field(alias="endAt")


class RedeemLoyaltyPointsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    points: int


class TransferLoyaltyPointsBetweenUsersInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    receiving_user_id: str = Field(alias="receivingUserId")
    points: int


class SetLoyaltyPointsUserInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    new_loyalty_points_user_id: str = Field(alias="newLoyaltyPointsUserId")


class CreateReferralInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reference: str


class CreatePortfolioInput(BaseModel):
    brand_code: Optional[str] = Field(alias="brandCode")
    operations_team_id: Optional[str] = Field(alias="operationsTeamId")
    collective_billing: Optional[bool] = Field(alias="collectiveBilling")


class CreateOrUpdateLoyaltyCardInput(BaseModel):
    account_user_id: Optional[str] = Field(alias="accountUserId")
    scheme: Optional[str]
    number: Optional[str]


class LinkUserToLineInput(BaseModel):
    link_token: str = Field(alias="linkToken")


class CreateAffiliateLinkInputType(BaseModel):
    organisation_id: str = Field(alias="organisationId")
    subdomain: str
    contact_name: str = Field(alias="contactName")
    contact_email: str = Field(alias="contactEmail")


class UpdateAffiliateLinkInputType(BaseModel):
    link_id: str = Field(alias="linkId")
    organisation_id: Optional[str] = Field(alias="organisationId")
    subdomain: Optional[str]
    contact_name: Optional[str] = Field(alias="contactName")
    contact_email: Optional[str] = Field(alias="contactEmail")
    is_business: Optional[bool] = Field(alias="isBusiness")
    landing_url: Optional[str] = Field(alias="landingUrl")
    training_status: Optional[str] = Field(alias="trainingStatus")


class CreateAffiliateOrganisationInputType(BaseModel):
    name: str
    sales_channel: SalesChannelChoices = Field(alias="salesChannel")
    default_account_type: AccountTypeChoices = Field(alias="defaultAccountType")
    can_register_business_meter_points: Optional[bool] = Field(
        alias="canRegisterBusinessMeterPoints"
    )
    can_register_portfolio_accounts: Optional[bool] = Field(
        alias="canRegisterPortfolioAccounts"
    )
    can_register_customers_without_email_address: Optional[bool] = Field(
        alias="canRegisterCustomersWithoutEmailAddress"
    )
    skip_meter_point_address_validation: Optional[bool] = Field(
        alias="skipMeterPointAddressValidation"
    )
    allow_alternative_payment_methods: Optional[bool] = Field(
        alias="allowAlternativePaymentMethods"
    )
    can_renew_tariffs: Optional[bool] = Field(alias="canRenewTariffs")
    can_use_ivr_support_api: Optional[bool] = Field(alias="canUseIvrSupportApi")
    is_field_sales_only_product: Optional[bool] = Field(alias="isFieldSalesOnlyProduct")


class UpdateAffiliateOrganisationInputType(BaseModel):
    organisation_id: str = Field(alias="organisationId")
    name: Optional[str]
    sales_channel: Optional[SalesChannelChoices] = Field(alias="salesChannel")
    default_account_type: Optional[AccountTypeChoices] = Field(
        alias="defaultAccountType"
    )
    can_register_business_meter_points: Optional[bool] = Field(
        alias="canRegisterBusinessMeterPoints"
    )
    can_register_portfolio_accounts: Optional[bool] = Field(
        alias="canRegisterPortfolioAccounts"
    )
    can_register_customers_without_email_address: Optional[bool] = Field(
        alias="canRegisterCustomersWithoutEmailAddress"
    )
    skip_meter_point_address_validation: Optional[bool] = Field(
        alias="skipMeterPointAddressValidation"
    )
    allow_alternative_payment_methods: Optional[bool] = Field(
        alias="allowAlternativePaymentMethods"
    )
    can_renew_tariffs: Optional[bool] = Field(alias="canRenewTariffs")
    can_use_ivr_support_api: Optional[bool] = Field(alias="canUseIvrSupportApi")
    is_field_sales_only_product: Optional[bool] = Field(alias="isFieldSalesOnlyProduct")


class CreateAffiliateSessionInputType(BaseModel):
    link_id: str = Field(alias="linkId")
    ip_address: Optional[str] = Field(alias="ipAddress")
    user_agent: Optional[str] = Field(alias="userAgent")
    query_params: Optional[Any] = Field(alias="queryParams")
    quote_share_id: Optional[str] = Field(alias="quoteShareId")


class ValidateEmailInput(BaseModel):
    email: str


class ValidatePhoneNumberInput(BaseModel):
    phone_number: str = Field(alias="phoneNumber")


class BackendScreenEventInput(BaseModel):
    event_id: str = Field(alias="eventId")
    params: Optional[List[Optional["BackendScreenParamInputType"]]]


class CustomerFeedbackInputType(BaseModel):
    answer: Optional[str]
    issue_resolved: bool = Field(alias="issueResolved")
    form_id: int = Field(alias="formId")
    feedback_id: int = Field(alias="feedbackId")
    account_number: str = Field(alias="accountNumber")


class RequestRepaymentInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_id: str = Field(alias="ledgerId")
    amount_in_minor_unit: int = Field(alias="amountInMinorUnit")
    method: Optional[RequestableRepaymentMethod]
    idempotency_key: str = Field(alias="idempotencyKey")


class CancelRepaymentRequestInputType(BaseModel):
    request_id: str = Field(alias="requestId")


class RepaymentInput(BaseModel):
    repayment_id: str = Field(alias="repaymentId")
    reason: Optional[str]


class CollectDepositInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")
    idempotency_key: str = Field(alias="idempotencyKey")


class DepositAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")


class CreateDepositAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")
    reason: str


class InitiateStandalonePaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    description: str
    collection_method: Optional[CollectionMethod] = Field(alias="collectionMethod")
    ledger_id: Optional[str] = Field(alias="ledgerId")


class GetEmbeddedSecretForNewPaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    instruction_type: PaymentType = Field(alias="instructionType")
    ledger_id: Optional[str] = Field(alias="ledgerId")


class StorePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    instruction_type: PaymentType = Field(alias="instructionType")
    valid_from: Any = Field(alias="validFrom")
    vendor_reference: str = Field(alias="vendorReference")
    ledger_id: Optional[str] = Field(alias="ledgerId")


class InvalidatePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    id: str


class SetUpDirectDebitInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_id: str = Field(alias="ledgerId")
    valid_from: Any = Field(alias="validFrom")
    bank_details: "BankDetailsInput" = Field(alias="bankDetails")


class BankDetailsInput(BaseModel):
    account_holder: Optional[str] = Field(alias="accountHolder")
    iban: Optional[str]
    account_number: Optional[str] = Field(alias="accountNumber")
    bank_code: Optional[str] = Field(alias="bankCode")
    branch_code: Optional[str] = Field(alias="branchCode")
    account_type: Optional[str] = Field(alias="accountType")


class CollectPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    payment_date: Any = Field(alias="paymentDate")
    description: str
    idempotency_key: str = Field(alias="idempotencyKey")
    collection_method: Optional[PaymentType] = Field(alias="collectionMethod")
    ledger_id: str = Field(alias="ledgerId")


class AmendPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_id: int = Field(alias="paymentId")
    amount: int
    payment_date: Any = Field(alias="paymentDate")
    reason: Optional[str]


class AssignInkBucketInput(BaseModel):
    conversation_relay_id: str = Field(alias="conversationRelayId")
    bucket_name: str = Field(alias="bucketName")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class UpdateMessageTagsInput(BaseModel):
    message_relay_id: str = Field(alias="messageRelayId")
    tag_names: List[str] = Field(alias="tagNames")
    tagger_code: str = Field(alias="taggerCode")
    tagger_version: str = Field(alias="taggerVersion")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class CreateInkInboundMessageInput(BaseModel):
    channel: InkCommunicationChannel
    message_id: str = Field(alias="messageId")
    new_message: "InkMessageInput" = Field(alias="newMessage")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class InkMessageInput(BaseModel):
    generic: Optional["InkGenericMessageInput"]
    email: Optional["InkEmailMessageInput"]


class InkGenericMessageInput(BaseModel):
    plain_text_content: str = Field(alias="plainTextContent")
    attachments: Optional[List["InkGenericMessageAttachmentInput"]]
    from_handle: str = Field(alias="fromHandle")
    to_handle: str = Field(alias="toHandle")


class InkGenericMessageAttachmentInput(BaseModel):
    s3_key: str = Field(alias="s3Key")
    s3_bucket: str = Field(alias="s3Bucket")


class InkEmailMessageInput(BaseModel):
    plain_text_content: str = Field(alias="plainTextContent")
    attachments: Optional[List["InkGenericMessageAttachmentInput"]]
    subject: str
    from_address: Any = Field(alias="fromAddress")
    to_addresses: List[Any] = Field(alias="toAddresses")
    cc_addresses: Optional[List[Any]] = Field(alias="ccAddresses")


class GenerateInkPresignedUrlInput(BaseModel):
    channel: InkCommunicationChannel
    filename: str


class CreateGoodsQuoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    products_to_quote: List["ProductToQuoteInput"] = Field(alias="productsToQuote")
    client_params: Optional[Any] = Field(alias="clientParams")


class ProductToQuoteInput(BaseModel):
    product_id: int = Field(alias="productId")
    number_of_units: int = Field(alias="numberOfUnits")
    price_per_unit: Optional[int] = Field(alias="pricePerUnit")
    currency: str


class CreateGoodsQuoteWithoutAccountInput(BaseModel):
    customer_profile: "CustomerProfileInput" = Field(alias="customerProfile")
    products_to_quote: List["ProductToQuoteInput"] = Field(alias="productsToQuote")
    client_params: Optional[Any] = Field(alias="clientParams")


class CustomerProfileInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    email: str
    phone_number: str = Field(alias="phoneNumber")
    postcode: str
    address_line1: str = Field(alias="addressLine1")
    address_line2: Optional[str] = Field(alias="addressLine2")
    address_line3: Optional[str] = Field(alias="addressLine3")
    address_line4: Optional[str] = Field(alias="addressLine4")
    address_line5: Optional[str] = Field(alias="addressLine5")


class AcceptGoodsQuoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    quote_id: int = Field(alias="quoteId")
    client_params: Optional[Any] = Field(alias="clientParams")
    market_params: Optional[Any] = Field(alias="marketParams")


class ShareGoodsQuoteInput(BaseModel):
    quote_code: str = Field(alias="quoteCode")
    email: str


class CreatePurchaseInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    sale_items: List["ProductToPurchaseInput"] = Field(alias="saleItems")
    client_params: Optional[Any] = Field(alias="clientParams")
    market_params: Optional[Any] = Field(alias="marketParams")


class ProductToPurchaseInput(BaseModel):
    product_code: str = Field(alias="productCode")
    number_of_units: int = Field(alias="numberOfUnits")


class CreateAccountReminderInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reminder_type: AccountReminderTypes = Field(alias="reminderType")
    content: str
    due_at: Optional[Any] = Field(alias="dueAt")


class AccountReferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    namespace: str
    value: str


class DeleteAccountReferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    namespace: str


class CreateExternalAccountEventInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    category: ExternalAccountEventCategory
    subcategory: Optional[ExternalAccountEventSubCategory]
    description: Optional[str]
    content: List["ExternalAccountEventContent"]


class ExternalAccountEventContent(BaseModel):
    description: str
    content_type: ExternalAccountEventContentType = Field(alias="contentType")
    value: str


class CreateAccountCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    gross_amount: int = Field(alias="grossAmount")
    sales_tax_amount: int = Field(alias="salesTaxAmount")
    metadata: Optional[Any]
    note: Optional[str]
    reason: AccountCreditReasonType


class PostCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    tax_amount: int = Field(alias="taxAmount")
    display_note: Optional[str] = Field(alias="displayNote")
    note: Optional[str]
    reason: str
    ledger_id: str = Field(alias="ledgerId")


class CreateAccountChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    gross_amount: int = Field(alias="grossAmount")
    metadata: Optional[Any]
    note: Optional[str]
    display_note: Optional[str] = Field(alias="displayNote")
    reason: str


class TransferLedgerBalanceInputType(BaseModel):
    source_account_ledger: "AccountLedgerInput" = Field(alias="sourceAccountLedger")
    target_account_ledger: "AccountLedgerInput" = Field(alias="targetAccountLedger")
    amount: int
    note: Optional[str]


class AccountLedgerInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_id: str = Field(alias="ledgerId")


class FormSubmissionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    form_type: Optional[FormType] = Field(alias="formType")
    content: Any


class InvalidatePreSignedTokenInput(BaseModel):
    token: str


class InvalidatePreSignedTokensForUserInput(BaseModel):
    email: str
    scope: Optional[PreSignedTokenScope]


class RequestResetPasswordMutationInput(BaseModel):
    email: str
    is_create_mode: Optional[bool] = Field(alias="isCreateMode")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class RequestPasswordResetInput(BaseModel):
    email: str


class ResetPasswordMutationInput(BaseModel):
    password: str
    user_id: str = Field(alias="userId")
    token: str
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class ObtainJSONWebTokenInput(BaseModel):
    email: Optional[str]
    password: Optional[str]
    a_p_i_key: Optional[str] = Field(alias="APIKey")
    organization_secret_key: Optional[str] = Field(alias="organizationSecretKey")
    pre_signed_key: Optional[str] = Field(alias="preSignedKey")
    refresh_token: Optional[str] = Field(alias="refreshToken")


class ForceReauthenticationInput(BaseModel):
    include_third_parties: bool = Field(alias="includeThirdParties")


class ObtainLongLivedRefreshTokenInput(BaseModel):
    kraken_token: str = Field(alias="krakenToken")


class InvalidateRefreshTokenInput(BaseModel):
    refresh_token: str = Field(alias="refreshToken")


class InvalidateRefreshTokensForUserInput(BaseModel):
    email: str


class CreateAPIExceptionInput(BaseModel):
    external_identifier: str = Field(alias="externalIdentifier")
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus"
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType"
    )
    priority: Optional[APIExceptionPriority]
    context: Optional[Any]
    channel: str
    operations_team_id: Optional[int] = Field(alias="operationsTeamId")
    tags: Optional[List[Optional[APIExceptionTags]]]
    category: Optional[APIExceptionCategories]
    account_number: Optional[str] = Field(alias="accountNumber")
    user_id: Optional[int] = Field(alias="userId")
    customer_contact: Optional[str] = Field(alias="customerContact")
    supply_point_identifier: Optional[str] = Field(alias="supplyPointIdentifier")


class UpdateAPIExceptionInput(BaseModel):
    id: int
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus"
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType"
    )
    priority: Optional[APIExceptionPriority]
    context: Optional[Any]
    category: Optional[APIExceptionCategories]
    tags: Optional[List[Optional[APIExceptionTags]]]


class CreateAPICallInput(BaseModel):
    correlation_id: str = Field(alias="correlationId")
    operation_name: str = Field(alias="operationName")
    input_data: Optional[Any] = Field(alias="inputData")
    response: Any
    context: Optional[Any]
    api_exception_id: Optional[int] = Field(alias="apiExceptionId")


class CreateAPIExceptionEventInput(BaseModel):
    event_type: str = Field(alias="eventType")
    category: str
    description: str
    context: Optional[Any]
    api_exception_id: Optional[int] = Field(alias="apiExceptionId")


class CreateAPIExceptionNoteInput(BaseModel):
    body: str
    api_exception_id: str = Field(alias="apiExceptionId")


class UpdateAPIExceptionNoteInput(BaseModel):
    body: str
    api_exception_note_id: str = Field(alias="apiExceptionNoteId")


class UpdateAccountUserMutationInput(BaseModel):
    given_name: Optional[str] = Field(alias="givenName")
    family_name: Optional[str] = Field(alias="familyName")
    pronouns: Optional[str]
    mobile: Optional[str]
    email: Optional[str]
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth")
    landline: Optional[str]
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class UpdateAccountUserCommsPreferencesMutationInput(BaseModel):
    is_opted_in_to_client_messages: Optional[bool] = Field(
        alias="isOptedInToClientMessages"
    )
    is_opted_in_to_offer_messages: Optional[bool] = Field(
        alias="isOptedInToOfferMessages"
    )
    is_opted_in_to_recommended_messages: Optional[bool] = Field(
        alias="isOptedInToRecommendedMessages"
    )
    is_opted_in_to_update_messages: Optional[bool] = Field(
        alias="isOptedInToUpdateMessages"
    )
    is_opted_in_to_third_party_messages: Optional[bool] = Field(
        alias="isOptedInToThirdPartyMessages"
    )
    is_opted_in_meter_reading_confirmations: Optional[bool] = Field(
        alias="isOptedInMeterReadingConfirmations"
    )
    is_opted_in_to_sms_messages: Optional[bool] = Field(alias="isOptedInToSmsMessages")
    is_using_inverted_email_colours: Optional[bool] = Field(
        alias="isUsingInvertedEmailColours"
    )
    font_size_multiplier: Optional[float] = Field(alias="fontSizeMultiplier")
    email_format: Optional[str] = Field(alias="emailFormat")
    preferred_hold_music: Optional[str] = Field(alias="preferredHoldMusic")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class UpdatePasswordInput(BaseModel):
    old_password: str = Field(alias="oldPassword")
    new_password: str = Field(alias="newPassword")
    new_password_confirmed: str = Field(alias="newPasswordConfirmed")


class UpdateUserInput(BaseModel):
    given_name: Optional[str] = Field(alias="givenName")
    family_name: Optional[str] = Field(alias="familyName")
    pronouns: Optional[str]
    email: Optional[str]
    mobile: Optional[str]
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth")
    landline: Optional[str]
    user_id: Optional[str] = Field(alias="userId")
    title: Optional[str]


class RegisterPushNotificationBindingInput(BaseModel):
    token: str
    bundle_id: str = Field(alias="bundleId")


class DeletePushNotificationBindingInput(BaseModel):
    token: str


class TypedSourceInputType(BaseModel):
    utility: Optional[UtilityType]
    reading_frequency_type: Optional[ReadingFrequencyType] = Field(
        alias="readingFrequencyType"
    )
    reading_direction: Optional[ReadingDirectionType] = Field(alias="readingDirection")
    source_identifier: Optional[str] = Field(alias="sourceIdentifier")
    reading_quality: Optional[ReadingQualityType] = Field(alias="readingQuality")


class UtilityFiltersInput(BaseModel):
    electricity_filters: Optional["ElectricityFiltersInput"] = Field(
        alias="electricityFilters"
    )
    gas_filters: Optional["GasFiltersInput"] = Field(alias="gasFilters")


class ElectricityFiltersInput(BaseModel):
    reading_frequency_type: Optional[ReadingFrequencyType] = Field(
        alias="readingFrequencyType"
    )
    market_supply_point_id: Optional[str] = Field(alias="marketSupplyPointId")
    device_id: Optional[str] = Field(alias="deviceId")
    reading_direction: Optional[ReadingDirectionType] = Field(alias="readingDirection")
    register_id: Optional[str] = Field(alias="registerId")
    reading_quality: Optional[ReadingQualityType] = Field(alias="readingQuality")


class GasFiltersInput(BaseModel):
    reading_frequency_type: Optional[ReadingFrequencyType] = Field(
        alias="readingFrequencyType"
    )
    market_supply_point_id: Optional[str] = Field(alias="marketSupplyPointId")
    device_id: Optional[str] = Field(alias="deviceId")
    register_id: Optional[str] = Field(alias="registerId")


class CreatePortfolioUserRoleInput(BaseModel):
    portfolio_id: str = Field(alias="portfolioId")
    account_user_id: str = Field(alias="accountUserId")
    role: Optional[PortfolioUserRoleEnum]


class JoinFanClubInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    catchments: List[str]
    email: str


class FanClubDiscountNotificationInput(BaseModel):
    catchments: List[str]
    start_at: Any = Field(alias="startAt")
    end_at: Any = Field(alias="endAt")


class SmartMeterDeviceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")


class WheelOfFortuneSpinInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    supply_type: SupplyType = Field(alias="supplyType")
    terms_accepted: bool = Field(alias="termsAccepted")


class CreateAccountFileAttachmentInput(BaseModel):
    filename: str
    account_number: str = Field(alias="accountNumber")
    category: Category
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class BatteryChargingPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    minimum_soc_percentage: int = Field(alias="minimumSocPercentage")


class ProvisioningClaimRequestParameters(BaseModel):
    euid: str
    timestamp: str
    nonce: str
    signature: str


class SetZoneModeParameters(BaseModel):
    zone: Zone
    mode: Mode
    setpoint_in_celsius: Optional[Any] = Field(alias="setpointInCelsius")
    end_at: Optional[Any] = Field(alias="endAt")


class SetZoneSchedulesParameters(BaseModel):
    zone: Zone
    schedules: List["ZoneSchedule"]


class ZoneSchedule(BaseModel):
    days: str
    settings: List["ScheduleSettings"]


class ScheduleSettings(BaseModel):
    time: Any
    action: str
    setpoint_in_celsius: Optional[Any] = Field(alias="setpointInCelsius")


class SensorDisplayNameUpdate(BaseModel):
    sensor_code: str = Field(alias="sensorCode")
    new_display_name: str = Field(alias="newDisplayName")


class SetZonePrimarySensorParameters(BaseModel):
    zone: Zone
    sensor_code: str = Field(alias="sensorCode")


class RoomTemperatureInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    temperature: float


class HotWaterStateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    state: bool


class ClimateControlStateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    state: bool


class RegisterHeatPumpInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: Optional[int] = Field(alias="propertyId")
    heat_pump: "HeatPumpInput" = Field(alias="heatPump")
    provider: ProviderChoices
    authentication: "AuthenticationInput"


class HeatPumpInput(BaseModel):
    heat_pump_id: str = Field(alias="heatPumpId")


class RegisterDeviceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    vehicle: "VehicleInput"
    charge_point: "ChargePointInput" = Field(alias="chargePoint")
    supported_provider: ProviderChoices = Field(alias="supportedProvider")
    authentication: Optional["AuthenticationInput"]
    property_id: Optional[int] = Field(alias="propertyId")


class VehicleInput(BaseModel):
    vehicle_id: int = Field(alias="vehicleId")


class ChargePointInput(BaseModel):
    charge_point_id: Optional[str] = Field(alias="chargePointId")


class AccountNumberInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class ReauthenticateDeviceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    authentication: "AuthenticationInput"
    device_type: KrakenFlexDeviceTypes = Field(alias="deviceType")


class VehicleChargingPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    weekday_target_time: str = Field(alias="weekdayTargetTime")
    weekday_target_soc: int = Field(alias="weekdayTargetSoc")
    weekend_target_time: str = Field(alias="weekendTargetTime")
    weekend_target_soc: int = Field(alias="weekendTargetSoc")
    target_type: Optional[str] = Field(alias="targetType")


class DeleteBoostChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class OCPPAuthenticationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    details: str


class DeAuthenticationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_type: Optional[KrakenFlexDeviceTypes] = Field(alias="deviceType")


class DeviceRegistrationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    device_type: KrakenFlexDeviceTypes = Field(alias="deviceType")
    provider: ProviderChoices
    device_details: Optional["DeviceDetailsInput"] = Field(alias="deviceDetails")
    authentication: Optional["AuthenticationInput"]


class DeviceDetailsInput(BaseModel):
    device_variant_id: Optional[str] = Field(alias="deviceVariantId")
    aux_device_variant_id: Optional[str] = Field(alias="auxDeviceVariantId")


class AuthenticationInput(BaseModel):
    access_token: Optional[str] = Field(alias="accessToken")
    authorization_code: Optional[str] = Field(alias="authorizationCode")
    refresh_token: Optional[str] = Field(alias="refreshToken")
    expires_in: Optional[int] = Field(alias="expiresIn")
    state: Optional[str]
    provider_device_id: Optional[str] = Field(alias="providerDeviceId")
    redirect_uri: Optional[str] = Field(alias="redirectUri")


class CompleteDeviceRegistrationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    postal_code: str = Field(alias="postalCode")
    external_device_identifier: str = Field(alias="externalDeviceIdentifier")


class ChargeCarbonOffsetInput(BaseModel):
    expected_cost: int = Field(alias="expectedCost")
    transport_mode_code: str = Field(alias="transportModeCode")
    transport_mode_sub_code: Optional[str] = Field(alias="transportModeSubCode")
    hours_to_offset: int = Field(alias="hoursToOffset")
    account_number: str = Field(alias="accountNumber")


class JoinSavingSessionsCampaignInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: str


class JoinSavingSessionsEventInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    event_code: str = Field(alias="eventCode")


class AcceptTermsAndConditionsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    enrolment_id: str = Field(alias="enrolmentId")
    terms_version: "TermsVersionInput" = Field(alias="termsVersion")


class TermsVersionInput(BaseModel):
    version_major: int = Field(alias="versionMajor")
    version_minor: int = Field(alias="versionMinor")


class SavingSessionsEnrolmentOptions(BaseModel):
    should_enrol: Optional[bool] = Field(alias="shouldEnrol")
    nominated_mpan: Optional[str] = Field(alias="nominatedMpan")


class RedeemOctoPointsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class CreateEVChargersLeadInput(BaseModel):
    ev_chargers_lead: "EVChargersLeadInput" = Field(alias="evChargersLead")
    property_profile: Optional["PropertyProfileInput"] = Field(alias="propertyProfile")


class EVChargersLeadInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    email: str
    ev_charger: EVChargerTypes = Field(alias="evCharger")
    is_owner: bool = Field(alias="isOwner")
    postcode: str
    address_line: str = Field(alias="addressLine")
    phone_number: str = Field(alias="phoneNumber")


class PropertyProfileInput(BaseModel):
    installed_appliances: Optional["InstalledAppliancesInput"] = Field(
        alias="installedAppliances"
    )
    off_street_parking: Optional[YesNoAnswer] = Field(alias="offStreetParking")
    live_rented_accommodation: Optional[YesNoAnswer] = Field(
        alias="liveRentedAccommodation"
    )
    meter_location: Optional[MeterLocationChoices] = Field(alias="meterLocation")
    meter_location_not_listed: Optional[str] = Field(alias="meterLocationNotListed")
    distance_from_meter_to_charge_point: Optional[
        DistanceFromMeterToChargePointChoices
    ] = Field(alias="distanceFromMeterToChargePoint")
    cable_from_meter_to_charge_point_outside: Optional[
        CableFromMeterToChargePointChoices
    ] = Field(alias="cableFromMeterToChargePointOutside")
    cable_from_meter_to_charge_point_inside: Optional[
        CableFromMeterToChargePointChoices
    ] = Field(alias="cableFromMeterToChargePointInside")
    charge_point_installation_place: Optional[ChargePointInstallationChoices] = Field(
        alias="chargePointInstallationPlace"
    )
    charge_point_installation_place_not_listed: Optional[str] = Field(
        alias="chargePointInstallationPlaceNotListed"
    )
    black_box_meter_amp: Optional[BlackBoxMeterAmpChoices] = Field(
        alias="blackBoxMeterAmp"
    )
    people_living_at_your_property: Optional[int] = Field(
        alias="peopleLivingAtYourProperty"
    )
    three_phase_meter: Optional[YesNoIDontKnowAnswer] = Field(alias="threePhaseMeter")
    relevant_property_info: Optional[str] = Field(alias="relevantPropertyInfo")


class InstalledAppliancesInput(BaseModel):
    induction_hob: Optional[bool] = Field(alias="inductionHob")
    electric_oven: Optional[bool] = Field(alias="electricOven")
    immersion_heater: Optional[bool] = Field(alias="immersionHeater")
    electric_showers: Optional[bool] = Field(alias="electricShowers")
    electric_heater: Optional[bool] = Field(alias="electricHeater")
    electric_boiler: Optional[bool] = Field(alias="electricBoiler")
    led_lightning: Optional[bool] = Field(alias="ledLightning")
    jacuzzi_hottub_sauna: Optional[bool] = Field(alias="jacuzziHottubSauna")
    existing_fast_ev_charge_point_in_use: Optional[bool] = Field(
        alias="existingFastEvChargePointInUse"
    )
    solar_panels: Optional[bool] = Field(alias="solarPanels")
    heat_pump: Optional[bool] = Field(alias="heatPump")
    battery_storage: Optional[bool] = Field(alias="batteryStorage")


class QuoteCampaignOfferInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    campaign_slug: str = Field(alias="campaignSlug")


class ReplaceAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpxn: str
    replace_on_date: Any = Field(alias="replaceOnDate")
    new_product_code: str = Field(alias="newProductCode")


class FitMeterReadingInput(BaseModel):
    installations: List["FitInstallationInput"]


class FitInstallationInput(BaseModel):
    fit_id: str = Field(alias="fitId")
    meters: List["FitMeterInput"]


class FitMeterInput(BaseModel):
    id: int
    reading: "FitReadingInput"


class FitReadingInput(BaseModel):
    value: Any
    read_at: Any = Field(alias="readAt")
    is_biennial: Optional[bool] = Field(alias="isBiennial")


class CreateElectricJuiceAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    valid_from: Optional[Any] = Field(alias="validFrom")


class CreateElectricJuiceChargeCardInput(BaseModel):
    charge_card_uid: str = Field(alias="chargeCardUid")
    name_on_card: str = Field(alias="nameOnCard")
    account_number: str = Field(alias="accountNumber")


class CreateHeatPumpGoodsQuoteInput(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber")
    product_id: int = Field(alias="productId")
    address_details: "AddressDetailsInput" = Field(alias="addressDetails")
    contact_details: "ContactDetailsInput" = Field(alias="contactDetails")
    property_details: "PropertyDetailsInput" = Field(alias="propertyDetails")


class AddressDetailsInput(BaseModel):
    address_line1: str = Field(alias="addressLine1")
    address_line2: str = Field(alias="addressLine2")
    address_line3: Optional[str] = Field(alias="addressLine3")
    address_line4: Optional[str] = Field(alias="addressLine4")
    address_line5: Optional[str] = Field(alias="addressLine5")
    postcode: str


class ContactDetailsInput(BaseModel):
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    email: str
    phone: str
    consent_to_mbna: Optional[bool] = Field(alias="consentToMbna")


class PropertyDetailsInput(BaseModel):
    property_type: HeatPumpPropertyType = Field(alias="propertyType")
    heat_type: HeatPumpHeatType = Field(alias="heatType")
    has_outdoor_space_for_heat_pump: Optional[bool] = Field(
        alias="hasOutdoorSpaceForHeatPump"
    )
    has_indoor_space_for_cylinder: Optional[bool] = Field(
        alias="hasIndoorSpaceForCylinder"
    )
    is_home_renovation: Optional[bool] = Field(alias="isHomeRenovation")


class CreateElectricJuiceChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    charge_card_uid: Optional[str] = Field(alias="chargeCardUid")
    period_start_at: Any = Field(alias="periodStartAt")
    period_end_at: Any = Field(alias="periodEndAt")
    net_amount: int = Field(alias="netAmount")
    charge_provider: str = Field(alias="chargeProvider")
    postcode: str
    kwh_used: Any = Field(alias="kwhUsed")
    price_per_kwh: Any = Field(alias="pricePerKwh")
    additional_fees: int = Field(alias="additionalFees")


class CreateElectricJuiceCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    gross_amount: int = Field(alias="grossAmount")
    tax_amount: int = Field(alias="taxAmount")
    note: Optional[str]
    reason: AccountCreditReasonType


class CreateEvPublicChargingAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    external_account_id: str = Field(alias="externalAccountId")
    valid_from: Any = Field(alias="validFrom")


class AddEvPublicChargingTokenInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    token_value: str = Field(alias="tokenValue")
    valid_from: Any = Field(alias="validFrom")


class ExpireEvPublicChargingTokenInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    token_value: str = Field(alias="tokenValue")
    valid_to: Any = Field(alias="validTo")


class PostEVPublicChargingChargeInput(BaseModel):
    token_value: str = Field(alias="tokenValue")
    line_items: List["EVPCLineItem"] = Field(alias="lineItems")
    tax_items: List["EVPCTaxItem"] = Field(alias="taxItems")


class EVPCLineItem(BaseModel):
    amount: int
    period_start_at: Any = Field(alias="periodStartAt")
    period_end_at: Any = Field(alias="periodEndAt")
    band: ProductRateBands
    metadata: Optional[Any]


class EVPCTaxItem(BaseModel):
    amount: int
    amount_taxed: int = Field(alias="amountTaxed")
    rate: Any
    unit_type: TaxUnitType = Field(alias="unitType")
    tax_type: str = Field(alias="taxType")
    metadata: Optional[Any]


class PostEVPublicChargingCreditInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    net_amount: int = Field(alias="netAmount")
    tax_amount: int = Field(alias="taxAmount")
    reason: AccountCreditReasonType
    display_note: Optional[str] = Field(alias="displayNote")


class VehicleEligibilityInputType(BaseModel):
    registration_number: Optional[str] = Field(alias="registrationNumber")


class AddressSearchType(BaseModel):
    address_line1: str = Field(alias="addressLine1")
    address_line2: str = Field(alias="addressLine2")
    address_line3: str = Field(alias="addressLine3")
    town: str
    county: str
    postcode: str


class QuoteNewMeterPointsInput(BaseModel):
    electricity_meter_points_input: Optional[
        List["ElectricityMeterPointInput"]
    ] = Field(alias="electricityMeterPointsInput")
    gas_meter_points_input: Optional[List["GasMeterPointInput"]] = Field(
        alias="gasMeterPointsInput"
    )
    new_account_input: "NewAccountInput" = Field(alias="newAccountInput")
    product_tags: Optional[List[str]] = Field(alias="productTags")


class ElectricityMeterPointInput(BaseModel):
    mpan: Optional[str]
    consumption: Optional["ElectricityConsumptionInput"]
    meter_type: Optional[MeterType] = Field(alias="meterType")
    gsp_id: Optional[str] = Field(alias="gspId")
    flat_rate: Optional[bool] = Field(alias="flatRate")


class ElectricityConsumptionInput(BaseModel):
    standard: Optional[int]
    day: Optional[int]
    night: Optional[int]
    off_peak: Optional[int] = Field(alias="offPeak")
    is_estimate: Optional[bool] = Field(alias="isEstimate")


class GasMeterPointInput(BaseModel):
    mprn: Optional[str]
    consumption: Optional["GasConsumptionInput"]
    gsp_id: Optional[str] = Field(alias="gspId")


class GasConsumptionInput(BaseModel):
    value: int
    is_estimate: Optional[bool] = Field(alias="isEstimate")


class NewAccountInput(BaseModel):
    account_type: AccountTypeChoices = Field(alias="accountType")
    brand_code: str = Field(alias="brandCode")
    payment_method: Optional[PaymentMethodChoices] = Field(alias="paymentMethod")
    affiliate_session_id: Optional[str] = Field(alias="affiliateSessionId")


class QuoteNewMeterPointsOnBespokeProductsInput(BaseModel):
    electricity_meter_points_input: Optional[
        List["ElectricityMeterPointProductsInput"]
    ] = Field(alias="electricityMeterPointsInput")
    gas_meter_points_input: Optional[List["GasMeterPointProductsInput"]] = Field(
        alias="gasMeterPointsInput"
    )
    new_account_input: "NewAccountInput" = Field(alias="newAccountInput")


class ElectricityMeterPointProductsInput(BaseModel):
    mpan: Optional[str]
    consumption: Optional["ElectricityConsumptionInput"]
    meter_type: Optional[MeterType] = Field(alias="meterType")
    gsp_id: Optional[str] = Field(alias="gspId")
    flat_rate: Optional[bool] = Field(alias="flatRate")
    products_input: List["ElectricityProductInput"] = Field(alias="productsInput")


class ElectricityProductInput(BaseModel):
    code: Optional[str]
    payment_method: Optional[PaymentMethodChoices] = Field(alias="paymentMethod")
    bespoke_rates: Optional["ElectricityBespokeRates"] = Field(alias="bespokeRates")


class ElectricityBespokeRates(BaseModel):
    standard: Optional[Any]
    day: Optional[Any]
    night: Optional[Any]
    off_peak: Optional[Any] = Field(alias="offPeak")
    standing_charge: Any = Field(alias="standingCharge")


class GasMeterPointProductsInput(BaseModel):
    mprn: Optional[str]
    consumption: Optional["GasConsumptionInput"]
    gsp_id: Optional[str] = Field(alias="gspId")
    products_input: List["GasProductInput"] = Field(alias="productsInput")


class GasProductInput(BaseModel):
    code: Optional[str]
    payment_method: Optional[PaymentMethodChoices] = Field(alias="paymentMethod")
    bespoke_rates: Optional["GasBespokeRates"] = Field(alias="bespokeRates")


class GasBespokeRates(BaseModel):
    value: Any
    standing_charge: Any = Field(alias="standingCharge")


class QuoteAccountOnProductsInput(BaseModel):
    electricity_meter_points_input: Optional[
        List["ElectricityMeterPointProductsInput"]
    ] = Field(alias="electricityMeterPointsInput")
    gas_meter_points_input: Optional[List["GasMeterPointProductsInput"]] = Field(
        alias="gasMeterPointsInput"
    )
    account_number: str = Field(alias="accountNumber")
    at: Any


class CreateRenewalQuoteRequestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    renewal_at: Any = Field(alias="renewalAt")


class CreateQuoteRequestForProductsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    product_codes: List[str] = Field(alias="productCodes")
    renewal_at: Any = Field(alias="renewalAt")
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate")
    payment_method: Optional[PaymentMethodChoices] = Field(alias="paymentMethod")


class CreateAcquisitionQuoteRequestForProductsInput(BaseModel):
    electricity_meter_points: Optional[
        List[Optional["ElectricityMeterPointConsumptionInput"]]
    ] = Field(alias="electricityMeterPoints")
    gas_meter_points: Optional[List[Optional["GasMeterPointConsumptionInput"]]] = Field(
        alias="gasMeterPoints"
    )
    postcode: str
    product_codes: List[str] = Field(alias="productCodes")
    payment_method: Optional[PaymentMethodChoices] = Field(alias="paymentMethod")


class ElectricityMeterPointConsumptionInput(BaseModel):
    profile_class: Optional[int] = Field(alias="profileClass")
    mpan: Optional[str]
    is_estimate: bool = Field(alias="isEstimate")
    annual_consumption_standard: Optional[int] = Field(
        alias="annualConsumptionStandard"
    )
    annual_consumption_day: Optional[int] = Field(alias="annualConsumptionDay")
    annual_consumption_night: Optional[int] = Field(alias="annualConsumptionNight")


class GasMeterPointConsumptionInput(BaseModel):
    mprn: Optional[str]
    is_estimate: bool = Field(alias="isEstimate")
    annual_consumption: Optional[int] = Field(alias="annualConsumption")


class RefundRequestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    requested_amount: int = Field(alias="requestedAmount")


class UpdateSmartMeterDataPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reading_frequency: SmartMeterReadingFrequencyChoices = Field(
        alias="readingFrequency"
    )
    allow_readings_analysis: Optional[bool] = Field(alias="allowReadingsAnalysis")


class CommissionMeterInput(BaseModel):
    mpxn: Optional[str]
    chf_device_id: str = Field(alias="chfDeviceId")
    meter_device_id: str = Field(alias="meterDeviceId")
    installation_code: str = Field(alias="installationCode")
    meter_type: MeterTypeChoices = Field(alias="meterType")
    serial_number: Optional[str] = Field(alias="serialNumber")


class DecommissionSmartDeviceInput(BaseModel):
    device_id: str = Field(alias="deviceId")


class RegisterSmartDeviceInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    map_mpid: Optional[str] = Field(alias="mapMpid")
    supplier_mpid: str = Field(alias="supplierMpid")
    device_manufacturer: str = Field(alias="deviceManufacturer")
    device_model: str = Field(alias="deviceModel")
    device_type: str = Field(alias="deviceType")
    smets_chts_version: Optional[str] = Field(alias="smetsChtsVersion")
    install_code: str = Field(alias="installCode")
    esme_variant: Optional[str] = Field(alias="esmeVariant")
    serial_number: Optional[str] = Field(alias="serialNumber")
    firmware_version: Optional[str] = Field(alias="firmwareVersion")


class UpdateCommsHubStatusInput(BaseModel):
    chf_device_id: str = Field(alias="chfDeviceId")
    update_type: CommsHubStatusUpdateType = Field(alias="updateType")
    mpxn: Optional[str]
    chf_install_type: Optional[CHFInstallType] = Field(alias="chfInstallType")
    has_aerial_installed: Optional[bool] = Field(alias="hasAerialInstalled")
    chf_location: Optional[CHFLocation] = Field(alias="chfLocation")
    premise_type: Optional[PremiseType] = Field(alias="premiseType")
    has_metal_obstruction: Optional[bool] = Field(alias="hasMetalObstruction")
    has_connectivity_obstruction: Optional[bool] = Field(
        alias="hasConnectivityObstruction"
    )
    has_shared_obstruction: Optional[bool] = Field(alias="hasSharedObstruction")
    fault_reason: Optional[CHFFaultReason] = Field(alias="faultReason")
    fault_return_type: Optional[CHFFaultReturnType] = Field(alias="faultReturnType")
    chf_connection_method: Optional[CHFConnectionMethod] = Field(
        alias="chfConnectionMethod"
    )
    no_fault_return_type: Optional[CHFNoFaultReturnType] = Field(
        alias="noFaultReturnType"
    )


class JoinConsumerDeviceInput(BaseModel):
    fuel_type: Optional[FuelTypeChoices] = Field(alias="fuelType")
    chf_device_id: str = Field(alias="chfDeviceId")
    consumer_device_id: str = Field(alias="consumerDeviceId")
    installation_code: Optional[str] = Field(alias="installationCode")
    consumer_device_type: JoinConsumerDeviceChoices = Field(alias="consumerDeviceType")


class RemoveConsumerDeviceInput(BaseModel):
    consumer_device_id: str = Field(alias="consumerDeviceId")
    consumer_device_type: RemoveConsumerDeviceChoices = Field(
        alias="consumerDeviceType"
    )


class SmartPrepayMeterAmountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")
    amount: int
    payment_intent_id: Optional[str] = Field(alias="paymentIntentId")
    is_temporary_credit: Optional[bool] = Field(alias="isTemporaryCredit")
    reason: Optional[str]


class RequestConsumptionDataInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    start_at: Optional[Any] = Field(alias="startAt")
    end_at: Optional[Any] = Field(alias="endAt")


class ReplaceCommsHubInput(BaseModel):
    old_comms_hub_device_id: str = Field(alias="oldCommsHubDeviceId")
    new_comms_hub_device_id: str = Field(alias="newCommsHubDeviceId")


class CreatePaymentIntentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    date: Any


class OccupyInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    quote_code: str = Field(alias="quoteCode")
    product_code: str = Field(alias="productCode")
    payment_day: Optional[int] = Field(alias="paymentDay")
    direct_debit_instruction: Optional[
        "DirectDebitInstructionLocalBankDetailsInput"
    ] = Field(alias="directDebitInstruction")
    users: Optional[List[Optional["AccountUserInput"]]]
    move_in_date: Optional[Any] = Field(alias="moveInDate")


class DirectDebitInstructionLocalBankDetailsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    account_holder: str = Field(alias="accountHolder")
    sort_code: str = Field(alias="sortCode")


class AccountUserInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    email: str
    mobile: str
    opted_in_for_marketing: bool = Field(alias="optedInForMarketing")
    credit_score_data: Optional["CreditScoreData"] = Field(alias="creditScoreData")
    credit_score_fetched_at: Optional[Any] = Field(alias="creditScoreFetchedAt")
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth")
    psr_data: Optional["UpdateSpecialCircumstancesInput"] = Field(alias="psrData")


class CreditScoreData(BaseModel):
    risk_bracket: str = Field(alias="riskBracket")
    score: int


class UpdateSpecialCircumstancesInput(BaseModel):
    additional_presence_preferred: Optional[bool] = Field(
        alias="additionalPresencePreferred"
    )
    blind: Optional[bool]
    careline_telecare_system: Optional[bool] = Field(alias="carelineTelecareSystem")
    chronic_serious_illness: Optional[bool] = Field(alias="chronicSeriousIllness")
    dementia: Optional[bool]
    developmental_condition: Optional[bool] = Field(alias="developmentalCondition")
    elderly: Optional[bool]
    hearing_impairment: Optional[bool] = Field(alias="hearingImpairment")
    heart_lung_machine: Optional[bool] = Field(alias="heartLungMachine")
    kidney_dialysis: Optional[bool] = Field(alias="kidneyDialysis")
    mde_electric_showering: Optional[bool] = Field(alias="mdeElectricShowering")
    medicine_refrigeration: Optional[bool] = Field(alias="medicineRefrigeration")
    mental_health: Optional[bool] = Field(alias="mentalHealth")
    nebuliser: Optional[bool]
    oxygen_concentrator: Optional[bool] = Field(alias="oxygenConcentrator")
    oxygen_use: Optional[bool] = Field(alias="oxygenUse")
    partial_sighted: Optional[bool] = Field(alias="partialSighted")
    physical_impairment: Optional[bool] = Field(alias="physicalImpairment")
    poor_sense_of_smell: Optional[bool] = Field(alias="poorSenseOfSmell")
    restricted_hand_movement: Optional[bool] = Field(alias="restrictedHandMovement")
    restricted_movement: Optional[bool] = Field(alias="restrictedMovement")
    speech_impairment: Optional[bool] = Field(alias="speechImpairment")
    stair_lift: Optional[bool] = Field(alias="stairLift")
    water_dependent: Optional[bool] = Field(alias="waterDependent")
    families_with_young_children5_or_under: Optional[bool] = Field(
        alias="familiesWithYoungChildren5OrUnder"
    )
    families_with_young_children5_or_under_end_date: Optional[str] = Field(
        alias="familiesWithYoungChildren5OrUnderEndDate"
    )
    temporary_life_changes: Optional[bool] = Field(alias="temporaryLifeChanges")
    temporary_life_changes_end_date: Optional[str] = Field(
        alias="temporaryLifeChangesEndDate"
    )
    temporary_post_hospital_recovery: Optional[bool] = Field(
        alias="temporaryPostHospitalRecovery"
    )
    temporary_post_hospital_recovery_end_date: Optional[str] = Field(
        alias="temporaryPostHospitalRecoveryEndDate"
    )
    temporary_young_adult_householder: Optional[bool] = Field(
        alias="temporaryYoungAdultHouseholder"
    )
    temporary_young_adult_householder_end_date: Optional[str] = Field(
        alias="temporaryYoungAdultHouseholderEndDate"
    )
    foreign_language_speaker: Optional[bool] = Field(alias="foreignLanguageSpeaker")
    language: Optional[str]
    use_password_to_identify: Optional[bool] = Field(alias="usePasswordToIdentify")
    partner_password: Optional[str] = Field(alias="partnerPassword")
    user_consent: Optional[bool] = Field(alias="userConsent")


class MoveOutInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    move_out_date: Any = Field(alias="moveOutDate")
    new_property: Optional["MoveInNewProperty"] = Field(alias="newProperty")
    new_tenant: Optional["MoveOutNewTenant"] = Field(alias="newTenant")


class MoveInNewProperty(BaseModel):
    address: str
    postcode: str
    move_in_date: Optional[str] = Field(alias="moveInDate")
    mpans: Optional[List[Optional[str]]]
    mprns: Optional[List[Optional[str]]]
    product_code: Optional[str] = Field(alias="productCode")
    quote_code: Optional[str] = Field(alias="quoteCode")
    move_in_new_property: Optional[bool] = Field(alias="moveInNewProperty")


class MoveOutNewTenant(BaseModel):
    given_name: Optional[str] = Field(alias="givenName")
    family_name: Optional[str] = Field(alias="familyName")
    email: Optional[str]
    mobile: Optional[str]
    role: Optional[str]


class CreateShellAccountInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    billing_name: Optional[str] = Field(alias="billingName")
    email: str
    mobile: Optional[str]
    landline: Optional[str]
    brand: Optional[str]
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth")
    billing_address_line1: str = Field(alias="billingAddressLine1")
    billing_address_line2: str = Field(alias="billingAddressLine2")
    billing_address_line3: Optional[str] = Field(alias="billingAddressLine3")
    billing_address_line4: Optional[str] = Field(alias="billingAddressLine4")
    billing_address_line5: Optional[str] = Field(alias="billingAddressLine5")
    billing_postcode: str = Field(alias="billingPostcode")
    billing_period_length: Optional[str] = Field(alias="billingPeriodLength")
    billing_period_multiplier: Optional[int] = Field(alias="billingPeriodMultiplier")
    billing_period_day: Optional[int] = Field(alias="billingPeriodDay")
    billing_period_month: Optional[int] = Field(alias="billingPeriodMonth")
    is_business_account: Optional[bool] = Field(alias="isBusinessAccount")
    company_name: Optional[str] = Field(alias="companyName")
    company_number: Optional[str] = Field(alias="companyNumber")
    business_type: Optional[str] = Field(alias="businessType")
    password: Optional[str]
    password_update_token: Optional[str] = Field(alias="passwordUpdateToken")
    urn: Optional[str]
    client_mutation_id: Optional[str] = Field(alias="clientMutationId")


class UpdateCommsDeliveryPreferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    comms_delivery_preference: CommsDeliveryPreference = Field(
        alias="commsDeliveryPreference"
    )


class UpdateAccountBillingEmailInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    billing_email: Optional[str] = Field(alias="billingEmail")


class AddCampaignToAccountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    campaign: str


class AccountBillingAddressInput(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber")
    billing_address: Optional["BillingAddressDetailsInput"] = Field(
        alias="billingAddress"
    )


class BillingAddressDetailsInput(BaseModel):
    street_address: Optional[str] = Field(alias="streetAddress")
    structured_street_address: Optional[Any] = Field(alias="structuredStreetAddress")
    dependent_locality: Optional[str] = Field(alias="dependentLocality")
    locality: Optional[str]
    postal_code: Optional[str] = Field(alias="postalCode")
    sorting_code: Optional[str] = Field(alias="sortingCode")
    delivery_point_identifier: Optional[str] = Field(alias="deliveryPointIdentifier")
    administrative_area: Optional[str] = Field(alias="administrativeArea")
    country: Optional[str]


class CreateAccountNoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    note: str
    is_pinned: bool = Field(alias="isPinned")


class RenewAgreementsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    quoted_product_id: str = Field(alias="quotedProductId")
    property_id: str = Field(alias="propertyId")
    make_full_debt_repayment: bool = Field(alias="makeFullDebtRepayment")
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate")
    change_on: Optional[Any] = Field(alias="changeOn")


class RenewAgreementForMeterPointInput(BaseModel):
    mpxn: str
    tariff_code: str = Field(alias="tariffCode")
    valid_from_date: Any = Field(alias="validFromDate")
    valid_to_date: Optional[Any] = Field(alias="validToDate")
    agreed_from_date: Optional[Any] = Field(alias="agreedFromDate")
    bespoke_tariff_rates: Optional["BespokeTariffRatesInput"] = Field(
        alias="bespokeTariffRates"
    )
    commission: Optional["CommissionInput"]


class BespokeTariffRatesInput(BaseModel):
    standing_charge: Optional[Any] = Field(alias="standingCharge")
    unit_rate: Optional[Any] = Field(alias="unitRate")
    unit_rates: Optional[List[Optional["BespokeElectricityUnitRatesInput"]]] = Field(
        alias="unitRates"
    )


class BespokeElectricityUnitRatesInput(BaseModel):
    unit_rate: Any = Field(alias="unitRate")
    rate_type: NonBespokeElectricityRateTypeChoices = Field(alias="rateType")


class CommissionInput(BaseModel):
    organization_name: str = Field(alias="organizationName")
    unit_rate_uplift: Any = Field(alias="unitRateUplift")
    fixed_tpi_fee: Optional[int] = Field(alias="fixedTpiFee")


class RenewAgreementsForAccountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    electricity_agreements: Optional[
        List[Optional["AgreementRenewalProductInput"]]
    ] = Field(alias="electricityAgreements")
    gas_agreements: Optional[List[Optional["AgreementRenewalProductInput"]]] = Field(
        alias="gasAgreements"
    )
    change_on: Optional[Any] = Field(alias="changeOn")


class AgreementRenewalProductInput(BaseModel):
    agreement_id: str = Field(alias="agreementId")
    product_code: str = Field(alias="productCode")


class UpdateAccountSmartMeterInterestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    smets2_interest: SmartMeterInterestChoices = Field(alias="smets2Interest")
    smets2_interest_source: Optional[SmartMeterInterestSourceChoices] = Field(
        alias="smets2InterestSource"
    )
    smets2_refusal_reason: Optional[SMETS2InterestReason] = Field(
        alias="smets2RefusalReason"
    )


class StartSmartOnboardingProcessInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: Optional[str]
    mprn: Optional[str]
    product_code: str = Field(alias="productCode")
    is_new_account: Optional[bool] = Field(alias="isNewAccount")
    terms_and_conditions: Optional["TermsAndConditions"] = Field(
        alias="termsAndConditions"
    )
    target_agreement_change_date: Optional[Any] = Field(
        alias="targetAgreementChangeDate"
    )


class TermsAndConditions(BaseModel):
    version: str
    accepted: bool


class StartExportOnboardingProcessInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    import_mpan: Optional[str] = Field(alias="importMpan")
    export_mpan: Optional[str] = Field(alias="exportMpan")
    product_code: str = Field(alias="productCode")
    technology_type: ExportTechnologyType = Field(alias="technologyType")
    fit_status: FITStatus = Field(alias="fitStatus")
    include_fit_generation: Optional[bool] = Field(alias="includeFitGeneration")
    fit_id: Optional[str] = Field(alias="fitId")
    certificate: Optional["Certificate"]
    dno_status: DNOStatus = Field(alias="dnoStatus")
    terms_and_conditions_accepted: bool = Field(alias="termsAndConditionsAccepted")
    accepted_terms_and_conditions_version: Optional[str] = Field(
        alias="acceptedTermsAndConditionsVersion"
    )


class Certificate(BaseModel):
    number: str
    type: CertificateType


class UpdateSsdInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    desired_ssd: Any = Field(alias="desiredSsd")


class CreateSiteworksEventInput(BaseModel):
    siteworks_request_id: str = Field(alias="siteworksRequestId")
    event_type: SiteworksEventType = Field(alias="eventType")
    field_services_data: Optional[Any] = Field(alias="fieldServicesData")
    references: Optional[Any]
    event_notes: Optional[str] = Field(alias="eventNotes")


class CreateOrUpdateSiteworksAppointmentInput(BaseModel):
    agent_id: str = Field(alias="agentId")
    appointment_reference: str = Field(alias="appointmentReference")
    appointment_date: Any = Field(alias="appointmentDate")
    status: AppointmentStatus
    work_type: Optional[str] = Field(alias="workType")
    fuel_type: FuelType = Field(alias="fuelType")
    mpan: Optional[str]
    mprn: Optional[str]
    electricity_supply_type: Optional[ElectricitySupplyType] = Field(
        alias="electricitySupplyType"
    )
    gas_supply_type: Optional[GasSupplyType] = Field(alias="gasSupplyType")
    time_slot_start: Any = Field(alias="timeSlotStart")
    time_slot_end: Optional[Any] = Field(alias="timeSlotEnd")
    address: Optional["AddressInput"]
    is_emergency: Optional[bool] = Field(alias="isEmergency")
    engineer_name: Optional[str] = Field(alias="engineerName")
    status_reason: Optional[str] = Field(alias="statusReason")
    job_notes: Optional[str] = Field(alias="jobNotes")
    new_meter_category: Optional[NewMeterCategory] = Field(alias="newMeterCategory")
    electricity_meters: Optional[List[Optional["MeterInput"]]] = Field(
        alias="electricityMeters"
    )
    gas_meters: Optional[List[Optional["MeterInput"]]] = Field(alias="gasMeters")


class AddressInput(BaseModel):
    address_line1: Optional[str] = Field(alias="addressLine1")
    address_line2: Optional[str] = Field(alias="addressLine2")
    address_line3: Optional[str] = Field(alias="addressLine3")
    address_line4: Optional[str] = Field(alias="addressLine4")
    address_line5: Optional[str] = Field(alias="addressLine5")
    postcode: str


class MeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    status: Optional[MeterStatus]
    meter_type: Optional[str] = Field(alias="meterType")


class CancelSiteworksAppointmentInput(BaseModel):
    appointment_id: Optional[str] = Field(alias="appointmentId")
    agent_reference: Optional[str] = Field(alias="agentReference")


class ConfirmSiteworksAppointmentSlotInput(BaseModel):
    property_id: str = Field(alias="propertyId")
    appointment_date: Any = Field(alias="appointmentDate")
    start_time: Any = Field(alias="startTime")
    end_time: Any = Field(alias="endTime")
    additional_information: Optional[str] = Field(alias="additionalInformation")
    agent_reference: Optional[str] = Field(alias="agentReference")
    site_id: Optional[str] = Field(alias="siteId")
    slot_id: Optional[str] = Field(alias="slotId")
    calculation_id: Optional[str] = Field(alias="calculationId")
    promise_id: Optional[str] = Field(alias="promiseId")
    comms_strategy: Optional[CommsStrategyType] = Field(alias="commsStrategy")


class ReportRemovedMeterDetailsInput(BaseModel):
    appointment_id: Optional[str] = Field(alias="appointmentId")
    electricity_meter_point: Optional["RemovedElectricityMeterPointInput"] = Field(
        alias="electricityMeterPoint"
    )
    gas_meter_point: Optional["RemovedGasMeterPointInput"] = Field(
        alias="gasMeterPoint"
    )


class RemovedElectricityMeterPointInput(BaseModel):
    mpan: Optional[str]
    meters: Optional[List[Optional["RemovedElectricityMeterInput"]]]


class RemovedElectricityMeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    meter_type: Optional[ElectricityMeterTypes] = Field(alias="meterType")
    registers: List["RemovedElectricityMeterRegisterInput"]
    read_at: Optional[Any] = Field(alias="readAt")
    prepay_data: Optional["RemovedMeterPrepayDataInput"] = Field(alias="prepayData")


class RemovedElectricityMeterRegisterInput(BaseModel):
    id: str
    final_reading: float = Field(alias="finalReading")


class RemovedMeterPrepayDataInput(BaseModel):
    balance: Optional[int]
    cumulative_debt_balance: Optional[int] = Field(alias="cumulativeDebtBalance")
    emergency_credit_balance: Optional[int] = Field(alias="emergencyCreditBalance")


class RemovedGasMeterPointInput(BaseModel):
    mprn: Optional[str]
    meters: Optional[List[Optional["RemovedGasMeterInput"]]]


class RemovedGasMeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    meter_type: Optional[GasMeterTypes] = Field(alias="meterType")
    final_reading: float = Field(alias="finalReading")
    read_at: Optional[Any] = Field(alias="readAt")
    prepay_data: Optional["RemovedMeterPrepayDataInput"] = Field(alias="prepayData")


class DirectDebitPaymentDayUpdateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_day: int = Field(alias="paymentDay")


class UpdatePaymentSchedulePaymentDayInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_day: int = Field(alias="paymentDay")


class UpdatePaymentSchedulePaymentAmountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int


class CreateDirectDebitInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    direct_debit_instruction: "DirectDebitInstructionLocalBankDetailsInput" = Field(
        alias="directDebitInstruction"
    )


class PaymentScheduleInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_amount: int = Field(alias="paymentAmount")
    payment_day: int = Field(alias="paymentDay")


class WarmHomeDiscountApplicationInputType(BaseModel):
    qualifying_criteria: Optional[QualifyingCriteriaOptions] = Field(
        alias="qualifyingCriteria"
    )
    qualifying_component: Optional[CurrentQualifyingComponentOptions] = Field(
        alias="qualifyingComponent"
    )


class ReadingInputType(BaseModel):
    register_id: Optional[str] = Field(alias="registerId")
    reading: Optional[int]


class AmendUnbilledReadingInput(BaseModel):
    reading_id: int = Field(alias="readingId")
    reading_value: int = Field(alias="readingValue")
    reading_datetime: Any = Field(alias="readingDatetime")


class CreateQuoteInput(BaseModel):
    postcode: str
    electricity_meter_points: Optional[
        List[Optional["ElectricityMeterPointConsumptionInput"]]
    ] = Field(alias="electricityMeterPoints")
    gas_meter_points: Optional[List[Optional["GasMeterPointConsumptionInput"]]] = Field(
        alias="gasMeterPoints"
    )
    position: Optional["PositionInput"]
    gsp_group_id: Optional[str] = Field(alias="gspGroupId")
    affiliate_session_id: Optional[str] = Field(alias="affiliateSessionId")
    brand_code: str = Field(alias="brandCode")
    address: Optional["QuoteAddressInput"]
    is_business: Optional[bool] = Field(alias="isBusiness")
    has_consented_to_industry_data_search: Optional[bool] = Field(
        alias="hasConsentedToIndustryDataSearch"
    )
    payment_method: Optional[QuotePaymentMethodChoices] = Field(alias="paymentMethod")


class PositionInput(BaseModel):
    latitude: Optional[float]
    longitude: Optional[float]


class QuoteAddressInput(BaseModel):
    address_line1: Optional[str] = Field(alias="addressLine1")
    address_line2: Optional[str] = Field(alias="addressLine2")
    address_line3: Optional[str] = Field(alias="addressLine3")


class RefreshQuoteInput(BaseModel):
    code: str


class RequoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    product_available_at: Optional[Any] = Field(alias="productAvailableAt")
    include_hidden_products: Optional[bool] = Field(alias="includeHiddenProducts")
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate")
    payment_method: Optional[QuotePaymentMethodChoices] = Field(alias="paymentMethod")


class BillToLatestSmartMeterSnapshotInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: str


class SwitchMeterPointProductsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    meter_point_switch_contexts: List["MeterPointSwitchContext"] = Field(
        alias="meterPointSwitchContexts"
    )
    update_payment_amount: Optional[bool] = Field(alias="updatePaymentAmount")


class MeterPointSwitchContext(BaseModel):
    mpxn: str
    quoted_product_id: str = Field(alias="quotedProductId")
    change_on: Optional[Any] = Field(alias="changeOn")
    commission: Optional["CommissionInput"]
    flat_rate: Optional[bool] = Field(alias="flatRate")


class StoreElectricJuicePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    valid_from: Any = Field(alias="validFrom")
    vendor_reference: str = Field(alias="vendorReference")


MetadataInput.update_forward_refs()
BackendScreenParamInputType.update_forward_refs()
APIExceptionQueryInput.update_forward_refs()
AccountSearchInputType.update_forward_refs()
PublishTransactionalMessagingTriggerInput.update_forward_refs()
CreateContributionAgreementInput.update_forward_refs()
EndContributionAgreementInput.update_forward_refs()
RedeemLoyaltyPointsInput.update_forward_refs()
TransferLoyaltyPointsBetweenUsersInput.update_forward_refs()
SetLoyaltyPointsUserInput.update_forward_refs()
CreateReferralInput.update_forward_refs()
CreatePortfolioInput.update_forward_refs()
CreateOrUpdateLoyaltyCardInput.update_forward_refs()
LinkUserToLineInput.update_forward_refs()
CreateAffiliateLinkInputType.update_forward_refs()
UpdateAffiliateLinkInputType.update_forward_refs()
CreateAffiliateOrganisationInputType.update_forward_refs()
UpdateAffiliateOrganisationInputType.update_forward_refs()
CreateAffiliateSessionInputType.update_forward_refs()
ValidateEmailInput.update_forward_refs()
ValidatePhoneNumberInput.update_forward_refs()
BackendScreenEventInput.update_forward_refs()
CustomerFeedbackInputType.update_forward_refs()
RequestRepaymentInputType.update_forward_refs()
CancelRepaymentRequestInputType.update_forward_refs()
RepaymentInput.update_forward_refs()
CollectDepositInput.update_forward_refs()
DepositAgreementInput.update_forward_refs()
CreateDepositAgreementInput.update_forward_refs()
InitiateStandalonePaymentInput.update_forward_refs()
GetEmbeddedSecretForNewPaymentInstructionInput.update_forward_refs()
StorePaymentInstructionInput.update_forward_refs()
InvalidatePaymentInstructionInput.update_forward_refs()
SetUpDirectDebitInstructionInput.update_forward_refs()
BankDetailsInput.update_forward_refs()
CollectPaymentInput.update_forward_refs()
AmendPaymentInput.update_forward_refs()
AssignInkBucketInput.update_forward_refs()
UpdateMessageTagsInput.update_forward_refs()
CreateInkInboundMessageInput.update_forward_refs()
InkMessageInput.update_forward_refs()
InkGenericMessageInput.update_forward_refs()
InkGenericMessageAttachmentInput.update_forward_refs()
InkEmailMessageInput.update_forward_refs()
GenerateInkPresignedUrlInput.update_forward_refs()
CreateGoodsQuoteInput.update_forward_refs()
ProductToQuoteInput.update_forward_refs()
CreateGoodsQuoteWithoutAccountInput.update_forward_refs()
CustomerProfileInput.update_forward_refs()
AcceptGoodsQuoteInput.update_forward_refs()
ShareGoodsQuoteInput.update_forward_refs()
CreatePurchaseInput.update_forward_refs()
ProductToPurchaseInput.update_forward_refs()
CreateAccountReminderInput.update_forward_refs()
AccountReferenceInput.update_forward_refs()
DeleteAccountReferenceInput.update_forward_refs()
CreateExternalAccountEventInput.update_forward_refs()
ExternalAccountEventContent.update_forward_refs()
CreateAccountCreditInput.update_forward_refs()
PostCreditInput.update_forward_refs()
CreateAccountChargeInput.update_forward_refs()
TransferLedgerBalanceInputType.update_forward_refs()
AccountLedgerInput.update_forward_refs()
FormSubmissionInput.update_forward_refs()
InvalidatePreSignedTokenInput.update_forward_refs()
InvalidatePreSignedTokensForUserInput.update_forward_refs()
RequestResetPasswordMutationInput.update_forward_refs()
RequestPasswordResetInput.update_forward_refs()
ResetPasswordMutationInput.update_forward_refs()
ObtainJSONWebTokenInput.update_forward_refs()
ForceReauthenticationInput.update_forward_refs()
ObtainLongLivedRefreshTokenInput.update_forward_refs()
InvalidateRefreshTokenInput.update_forward_refs()
InvalidateRefreshTokensForUserInput.update_forward_refs()
CreateAPIExceptionInput.update_forward_refs()
UpdateAPIExceptionInput.update_forward_refs()
CreateAPICallInput.update_forward_refs()
CreateAPIExceptionEventInput.update_forward_refs()
CreateAPIExceptionNoteInput.update_forward_refs()
UpdateAPIExceptionNoteInput.update_forward_refs()
UpdateAccountUserMutationInput.update_forward_refs()
UpdateAccountUserCommsPreferencesMutationInput.update_forward_refs()
UpdatePasswordInput.update_forward_refs()
UpdateUserInput.update_forward_refs()
RegisterPushNotificationBindingInput.update_forward_refs()
DeletePushNotificationBindingInput.update_forward_refs()
TypedSourceInputType.update_forward_refs()
UtilityFiltersInput.update_forward_refs()
ElectricityFiltersInput.update_forward_refs()
GasFiltersInput.update_forward_refs()
CreatePortfolioUserRoleInput.update_forward_refs()
JoinFanClubInput.update_forward_refs()
FanClubDiscountNotificationInput.update_forward_refs()
SmartMeterDeviceInput.update_forward_refs()
WheelOfFortuneSpinInput.update_forward_refs()
CreateAccountFileAttachmentInput.update_forward_refs()
BatteryChargingPreferencesInput.update_forward_refs()
ProvisioningClaimRequestParameters.update_forward_refs()
SetZoneModeParameters.update_forward_refs()
SetZoneSchedulesParameters.update_forward_refs()
ZoneSchedule.update_forward_refs()
ScheduleSettings.update_forward_refs()
SensorDisplayNameUpdate.update_forward_refs()
SetZonePrimarySensorParameters.update_forward_refs()
RoomTemperatureInput.update_forward_refs()
HotWaterStateInput.update_forward_refs()
ClimateControlStateInput.update_forward_refs()
RegisterHeatPumpInput.update_forward_refs()
HeatPumpInput.update_forward_refs()
RegisterDeviceInput.update_forward_refs()
VehicleInput.update_forward_refs()
ChargePointInput.update_forward_refs()
AccountNumberInput.update_forward_refs()
ReauthenticateDeviceInput.update_forward_refs()
VehicleChargingPreferencesInput.update_forward_refs()
DeleteBoostChargeInput.update_forward_refs()
OCPPAuthenticationInput.update_forward_refs()
DeAuthenticationInput.update_forward_refs()
DeviceRegistrationInput.update_forward_refs()
DeviceDetailsInput.update_forward_refs()
AuthenticationInput.update_forward_refs()
CompleteDeviceRegistrationInput.update_forward_refs()
ChargeCarbonOffsetInput.update_forward_refs()
JoinSavingSessionsCampaignInput.update_forward_refs()
JoinSavingSessionsEventInput.update_forward_refs()
AcceptTermsAndConditionsInput.update_forward_refs()
TermsVersionInput.update_forward_refs()
SavingSessionsEnrolmentOptions.update_forward_refs()
RedeemOctoPointsInput.update_forward_refs()
CreateEVChargersLeadInput.update_forward_refs()
EVChargersLeadInput.update_forward_refs()
PropertyProfileInput.update_forward_refs()
InstalledAppliancesInput.update_forward_refs()
QuoteCampaignOfferInput.update_forward_refs()
ReplaceAgreementInput.update_forward_refs()
FitMeterReadingInput.update_forward_refs()
FitInstallationInput.update_forward_refs()
FitMeterInput.update_forward_refs()
FitReadingInput.update_forward_refs()
CreateElectricJuiceAgreementInput.update_forward_refs()
CreateElectricJuiceChargeCardInput.update_forward_refs()
CreateHeatPumpGoodsQuoteInput.update_forward_refs()
AddressDetailsInput.update_forward_refs()
ContactDetailsInput.update_forward_refs()
PropertyDetailsInput.update_forward_refs()
CreateElectricJuiceChargeInput.update_forward_refs()
CreateElectricJuiceCreditInput.update_forward_refs()
CreateEvPublicChargingAgreementInput.update_forward_refs()
AddEvPublicChargingTokenInput.update_forward_refs()
ExpireEvPublicChargingTokenInput.update_forward_refs()
PostEVPublicChargingChargeInput.update_forward_refs()
EVPCLineItem.update_forward_refs()
EVPCTaxItem.update_forward_refs()
PostEVPublicChargingCreditInput.update_forward_refs()
VehicleEligibilityInputType.update_forward_refs()
AddressSearchType.update_forward_refs()
QuoteNewMeterPointsInput.update_forward_refs()
ElectricityMeterPointInput.update_forward_refs()
ElectricityConsumptionInput.update_forward_refs()
GasMeterPointInput.update_forward_refs()
GasConsumptionInput.update_forward_refs()
NewAccountInput.update_forward_refs()
QuoteNewMeterPointsOnBespokeProductsInput.update_forward_refs()
ElectricityMeterPointProductsInput.update_forward_refs()
ElectricityProductInput.update_forward_refs()
ElectricityBespokeRates.update_forward_refs()
GasMeterPointProductsInput.update_forward_refs()
GasProductInput.update_forward_refs()
GasBespokeRates.update_forward_refs()
QuoteAccountOnProductsInput.update_forward_refs()
CreateRenewalQuoteRequestInput.update_forward_refs()
CreateQuoteRequestForProductsInput.update_forward_refs()
CreateAcquisitionQuoteRequestForProductsInput.update_forward_refs()
ElectricityMeterPointConsumptionInput.update_forward_refs()
GasMeterPointConsumptionInput.update_forward_refs()
RefundRequestInput.update_forward_refs()
UpdateSmartMeterDataPreferencesInput.update_forward_refs()
CommissionMeterInput.update_forward_refs()
DecommissionSmartDeviceInput.update_forward_refs()
RegisterSmartDeviceInput.update_forward_refs()
UpdateCommsHubStatusInput.update_forward_refs()
JoinConsumerDeviceInput.update_forward_refs()
RemoveConsumerDeviceInput.update_forward_refs()
SmartPrepayMeterAmountInput.update_forward_refs()
RequestConsumptionDataInput.update_forward_refs()
ReplaceCommsHubInput.update_forward_refs()
CreatePaymentIntentInput.update_forward_refs()
OccupyInput.update_forward_refs()
DirectDebitInstructionLocalBankDetailsInput.update_forward_refs()
AccountUserInput.update_forward_refs()
CreditScoreData.update_forward_refs()
UpdateSpecialCircumstancesInput.update_forward_refs()
MoveOutInput.update_forward_refs()
MoveInNewProperty.update_forward_refs()
MoveOutNewTenant.update_forward_refs()
CreateShellAccountInput.update_forward_refs()
UpdateCommsDeliveryPreferenceInput.update_forward_refs()
UpdateAccountBillingEmailInput.update_forward_refs()
AddCampaignToAccountInput.update_forward_refs()
AccountBillingAddressInput.update_forward_refs()
BillingAddressDetailsInput.update_forward_refs()
CreateAccountNoteInput.update_forward_refs()
RenewAgreementsInput.update_forward_refs()
RenewAgreementForMeterPointInput.update_forward_refs()
BespokeTariffRatesInput.update_forward_refs()
BespokeElectricityUnitRatesInput.update_forward_refs()
CommissionInput.update_forward_refs()
RenewAgreementsForAccountInput.update_forward_refs()
AgreementRenewalProductInput.update_forward_refs()
UpdateAccountSmartMeterInterestInput.update_forward_refs()
StartSmartOnboardingProcessInput.update_forward_refs()
TermsAndConditions.update_forward_refs()
StartExportOnboardingProcessInput.update_forward_refs()
Certificate.update_forward_refs()
UpdateSsdInput.update_forward_refs()
CreateSiteworksEventInput.update_forward_refs()
CreateOrUpdateSiteworksAppointmentInput.update_forward_refs()
AddressInput.update_forward_refs()
MeterInput.update_forward_refs()
CancelSiteworksAppointmentInput.update_forward_refs()
ConfirmSiteworksAppointmentSlotInput.update_forward_refs()
ReportRemovedMeterDetailsInput.update_forward_refs()
RemovedElectricityMeterPointInput.update_forward_refs()
RemovedElectricityMeterInput.update_forward_refs()
RemovedElectricityMeterRegisterInput.update_forward_refs()
RemovedMeterPrepayDataInput.update_forward_refs()
RemovedGasMeterPointInput.update_forward_refs()
RemovedGasMeterInput.update_forward_refs()
DirectDebitPaymentDayUpdateInput.update_forward_refs()
UpdatePaymentSchedulePaymentDayInput.update_forward_refs()
UpdatePaymentSchedulePaymentAmountInput.update_forward_refs()
CreateDirectDebitInstructionInput.update_forward_refs()
PaymentScheduleInput.update_forward_refs()
WarmHomeDiscountApplicationInputType.update_forward_refs()
ReadingInputType.update_forward_refs()
AmendUnbilledReadingInput.update_forward_refs()
CreateQuoteInput.update_forward_refs()
PositionInput.update_forward_refs()
QuoteAddressInput.update_forward_refs()
RefreshQuoteInput.update_forward_refs()
RequoteInput.update_forward_refs()
BillToLatestSmartMeterSnapshotInput.update_forward_refs()
SwitchMeterPointProductsInput.update_forward_refs()
MeterPointSwitchContext.update_forward_refs()
StoreElectricJuicePaymentInstructionInput.update_forward_refs()
