# Generated by ariadne-codegen
# Source: https://api.octopus.energy/v1/graphql/

from typing import Any, List, Optional

from pydantic import Field

from .base_model import BaseModel
from .enums import (
    AccountCreditReasonType,
    AccountReminderTypes,
    AccountTypeChoices,
    AllBandSubCategories,
    APIBrownoutStatus,
    APIExceptionCategories,
    APIExceptionPriority,
    APIExceptionResolutionStatus,
    APIExceptionResolutionType,
    APIExceptionTags,
    AppointmentStatus,
    BusinessTypeEnum,
    CancellationCategory,
    Category,
    CertificateType,
    CHFConnectionMethod,
    CHFFaultReason,
    CHFFaultReturnType,
    CHFInstallType,
    CHFLocation,
    CHFNoFaultReturnType,
    CollectionMethod,
    CollectionProcessRecordCompletionTypeChoices,
    CommsDeliveryPreference,
    CommsHubStatusUpdateType,
    CommsStrategy,
    ConsentValue,
    CurrentQualifyingComponentOptions,
    DayOfWeek,
    DNOStatus,
    ElectricityMeterTypes,
    ElectricitySupplyType,
    EmailFormats,
    ExportTechnologyType,
    ExternalAccountEventCategory,
    ExternalAccountEventContentType,
    ExternalAccountEventSubCategory,
    FITStatus,
    FormType,
    FuelType,
    FuelTypeChoices,
    GasMeterTypes,
    GasSupplyType,
    GSPGroupIdsOptions,
    HeatPumpHeatType,
    HeatPumpPropertyType,
    InkCommunicationChannel,
    Interval,
    JoinConsumerDeviceChoices,
    KrakenFlexDeviceTypes,
    LimitedBandCategories,
    LinkedObjectType,
    MeterStatus,
    MeterType,
    MeterTypeChoices,
    Mode,
    NewMeterCategory,
    NonBespokeElectricityRateTypeChoices,
    PaymentFrequency,
    PaymentMethod,
    PaymentMethodChoices,
    PaymentMode,
    PaymentType,
    PreferencesModeChoices,
    PreferencesUnitChoices,
    PremiseType,
    PreSignedTokenScope,
    ProductRateBands,
    ProviderChoices,
    QualifyingCriteriaOptions,
    QuotePaymentMethodChoices,
    ReadingDirectionType,
    ReadingFrequencyType,
    ReadingQualityType,
    RemoveConsumerDeviceChoices,
    RequestableRepaymentMethod,
    RequestStatus,
    SalesChannelChoices,
    ScheduleFrequencyEnum,
    SettingAction,
    SiteworksEventType,
    SmartControlAction,
    SmartMeterInterestChoices,
    SmartMeterInterestSourceChoices,
    SmartMeterReadingFrequencyChoices,
    SMETS2InterestReason,
    Songs,
    SupplyType,
    TaxUnitType,
    TemperatureUnit,
    Vendor,
    Zone,
    query_type,
)


class CreateCampaignItemsInput(BaseModel):
    campaign_id: str = Field(alias="campaignId")
    campaign_items: List["CampaignItemInput"] = Field(alias="campaignItems")


class CampaignItemInput(BaseModel):
    phone_number: Optional[str] = Field(alias="phoneNumber", default=None)
    call_window_start: Optional[Any] = Field(alias="callWindowStart", default=None)
    call_window_end: Optional[Any] = Field(alias="callWindowEnd", default=None)
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    metadata: Optional[Any] = None


class RemoveCampaignItemsInput(BaseModel):
    campaign_id: str = Field(alias="campaignId")
    campaign_item_ids: List[str] = Field(alias="campaignItemIds")


class TerminateCreditTransferPermissionInput(BaseModel):
    source_ledger_number: str = Field(alias="sourceLedgerNumber")
    target_ledger_number: str = Field(alias="targetLedgerNumber")
    active_at: Optional[Any] = Field(alias="activeAt", default=None)


class CreateCreditTransferPermissionInput(BaseModel):
    source_ledger_number: str = Field(alias="sourceLedgerNumber")
    target_ledger_number: str = Field(alias="targetLedgerNumber")


class PublishTransactionalMessagingTriggerInput(BaseModel):
    trigger_type_code: str = Field(alias="triggerTypeCode")
    params: Any


class RequestRepaymentInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)
    amount_in_minor_unit: int = Field(alias="amountInMinorUnit")
    method: Optional[RequestableRepaymentMethod] = None
    idempotency_key: str = Field(alias="idempotencyKey")
    reason: Optional[str] = None


class CancelRepaymentRequestInputType(BaseModel):
    request_id: str = Field(alias="requestId")


class RepaymentInput(BaseModel):
    repayment_id: str = Field(alias="repaymentId")
    reason: Optional[str] = None


class ApproveRepaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    repayment_id: str = Field(alias="repaymentId")


class CreateReminderInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reminder_type_name: str = Field(alias="reminderTypeName")
    content: str
    due_at: Any = Field(alias="dueAt")


class CreateReferralInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reference: str


class RedeemReferralClaimCodeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    code: str


class ValidateEmailInput(BaseModel):
    email: str
    check_uniqueness: Optional[bool] = Field(alias="checkUniqueness", default=None)


class ValidatePhoneNumberInput(BaseModel):
    phone_number: str = Field(alias="phoneNumber")


class QuoteShareInput(BaseModel):
    recipient: "Recipient"
    quote_code: str = Field(alias="quoteCode")
    account_number: Optional[str] = Field(alias="accountNumber", default=None)


class Recipient(BaseModel):
    given_name: Optional[str] = Field(alias="givenName", default=None)
    family_name: Optional[str] = Field(alias="familyName", default=None)
    email: Optional[str] = None
    mobile: Optional[str] = None


class SelectProductsInput(BaseModel):
    quote_code: str = Field(alias="quoteCode")
    selected_quoted_product_ids: List[str] = Field(alias="selectedQuotedProductIds")


class InitiateProductSwitchInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    quoted_product_id: str = Field(alias="quotedProductId")
    switch_date: Any = Field(alias="switchDate")
    user_id: Optional[str] = Field(alias="userId", default=None)
    suppress_communications: Optional[bool] = Field(
        alias="suppressCommunications", default=None
    )


class CreatePortfolioInput(BaseModel):
    brand_code: Optional[str] = Field(alias="brandCode", default=None)
    operations_team_id: Optional[str] = Field(alias="operationsTeamId", default=None)
    collective_billing: Optional[bool] = Field(alias="collectiveBilling", default=None)


class CollectDepositInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")
    idempotency_key: str = Field(alias="idempotencyKey")


class DepositAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")


class CreateDepositAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    deposit_key: str = Field(alias="depositKey")
    reason: str


class InitiateStandalonePaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    description: str
    collection_method: Optional[CollectionMethod] = Field(
        alias="collectionMethod", default=None
    )
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class InitiateHostedStandalonePaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    description: str
    collection_method: CollectionMethod = Field(alias="collectionMethod")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)
    return_url_success: Optional[str] = Field(alias="returnUrlSuccess", default=None)
    return_url_pending: Optional[str] = Field(alias="returnUrlPending", default=None)
    return_url_failure: Optional[str] = Field(alias="returnUrlFailure", default=None)
    return_url_error: Optional[str] = Field(alias="returnUrlError", default=None)
    return_url_cancel: Optional[str] = Field(alias="returnUrlCancel", default=None)
    return_url_expired: Optional[str] = Field(alias="returnUrlExpired", default=None)


class GetEmbeddedSecretForNewPaymentInstructionWithoutAccountInput(BaseModel):
    instruction_type: PaymentType = Field(alias="instructionType")


class GetEmbeddedSecretForNewPaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    instruction_type: PaymentType = Field(alias="instructionType")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class StorePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    instruction_type: PaymentType = Field(alias="instructionType")
    valid_from: Any = Field(alias="validFrom")
    vendor_reference: str = Field(alias="vendorReference")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class GetHostedUrlForNewPaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: str = Field(alias="ledgerNumber")
    instruction_type: PaymentType = Field(alias="instructionType")
    return_url_success: Optional[str] = Field(alias="returnUrlSuccess", default=None)
    return_url_failure: Optional[str] = Field(alias="returnUrlFailure", default=None)
    return_url_error: Optional[str] = Field(alias="returnUrlError", default=None)
    return_url_cancel: Optional[str] = Field(alias="returnUrlCancel", default=None)


class InvalidatePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    id: str


class SetUpDirectDebitInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)
    valid_from: Any = Field(alias="validFrom")
    bank_details: "BankDetailsInput" = Field(alias="bankDetails")


class BankDetailsInput(BaseModel):
    account_holder: Optional[str] = Field(alias="accountHolder", default=None)
    iban: Optional[str] = None
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    bank_code: Optional[str] = Field(alias="bankCode", default=None)
    branch_code: Optional[str] = Field(alias="branchCode", default=None)
    account_type: Optional[str] = Field(alias="accountType", default=None)


class CollectPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int
    payment_date: Any = Field(alias="paymentDate")
    description: str
    idempotency_key: str = Field(alias="idempotencyKey")
    collection_method: Optional[PaymentType] = Field(
        alias="collectionMethod", default=None
    )
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class AmendPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_id: int = Field(alias="paymentId")
    amount: int
    payment_date: Any = Field(alias="paymentDate")
    reason: Optional[str] = None


class UpdateAutoTopUpAmountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)
    payment_amount: int = Field(alias="paymentAmount")


class CreateAccountPaymentScheduleInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: str = Field(alias="ledgerNumber")
    payment_day: Optional[int] = Field(alias="paymentDay", default=None)
    payment_amount: Optional[int] = Field(alias="paymentAmount", default=None)


class SwitchAccountToVariablePaymentScheduleInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: str = Field(alias="ledgerNumber")
    target_change_date: Optional[Any] = Field(alias="targetChangeDate", default=None)
    note: Optional[str] = None


class CancelPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_id: str = Field(alias="paymentId")
    reason: Optional[str] = None


class RefundPaymentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_id: str = Field(alias="paymentId")
    amount_in_minor_unit: int = Field(alias="amountInMinorUnit")
    idempotency_key: str = Field(alias="idempotencyKey")
    reason: str


class BackendScreenEventInput(BaseModel):
    event_id: str = Field(alias="eventId")
    params: Optional[List[Optional["BackendScreenParamInputType"]]] = None


class BackendScreenParamInputType(BaseModel):
    key: str
    value: str


class RedeemLoyaltyPointsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    points: int


class TransferLoyaltyPointsBetweenUsersInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    receiving_user_id: str = Field(alias="receivingUserId")
    points: int


class SetLoyaltyPointsUserInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    new_loyalty_points_user_id: str = Field(alias="newLoyaltyPointsUserId")


class CreateOrUpdateLoyaltyCardInput(BaseModel):
    account_user_id: Optional[str] = Field(alias="accountUserId", default=None)
    scheme: Optional[str] = None
    number: Optional[str] = None


class LinkUserToLineInput(BaseModel):
    link_token: str = Field(alias="linkToken")


class LeaveSupplierInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    requested_supply_end_date: Any = Field(alias="requestedSupplyEndDate")
    market_data: Optional["LeaveSupplierMarketInputType"] = Field(
        alias="marketData", default=None
    )
    future_billing_address: Optional["RichAddressInput"] = Field(
        alias="futureBillingAddress", default=None
    )


class LeaveSupplierMarketInputType(BaseModel):
    supply_point_data: Optional[List[Optional["_DefaultMarketTerminationInput"]]] = (
        Field(alias="supplyPointData", default=None)
    )


class _DefaultMarketTerminationInput(BaseModel):
    supply_point_identifier: str = Field(alias="supplyPointIdentifier")


class RichAddressInput(BaseModel):
    name: Optional[str] = None
    organization: Optional[str] = None
    street_address: Optional[str] = Field(alias="streetAddress", default=None)
    structured_street_address: Optional[Any] = Field(
        alias="structuredStreetAddress", default=None
    )
    dependent_locality: Optional[str] = Field(alias="dependentLocality", default=None)
    locality: Optional[str] = None
    administrative_area: Optional[str] = Field(alias="administrativeArea", default=None)
    postal_code: Optional[str] = Field(alias="postalCode", default=None)
    sorting_code: Optional[str] = Field(alias="sortingCode", default=None)
    country: Optional[str] = None
    delivery_point_identifier: Optional[str] = Field(
        alias="deliveryPointIdentifier", default=None
    )


class UpdateLeaveSupplierInput(BaseModel):
    requested_supply_end_date: Any = Field(alias="requestedSupplyEndDate")
    market_data: Optional["LeaveSupplierMarketInputType"] = Field(
        alias="marketData", default=None
    )
    future_billing_address: Optional["RichAddressInput"] = Field(
        alias="futureBillingAddress", default=None
    )
    leave_supplier_process_id: str = Field(alias="leaveSupplierProcessId")


class CancelLeaveSupplierInput(BaseModel):
    leave_supplier_process_id: str = Field(alias="leaveSupplierProcessId")
    reason: Optional[str] = None


class PrepareAccountInput(BaseModel):
    account_type: Optional[AccountTypeChoices] = Field(
        alias="accountType", default=None
    )
    brand_code: str = Field(alias="brandCode")
    billing_name: str = Field(alias="billingName")
    billing_address: "LifecycleAddressInput" = Field(alias="billingAddress")
    customer_details: "CustomerDetailsInput" = Field(alias="customerDetails")
    sales_info: "SalesInformationInput" = Field(alias="salesInfo")
    preferred_ssd: Optional[Any] = Field(alias="preferredSsd", default=None)
    date_of_sale: Optional[Any] = Field(alias="dateOfSale", default=None)
    chosen_payment_day: Optional[int] = Field(alias="chosenPaymentDay", default=None)


class LifecycleAddressInput(BaseModel):
    line_1: str = Field(alias="line1")
    postal_code: str = Field(alias="postalCode")
    country_code: Optional[str] = Field(alias="countryCode", default=None)
    line_2: Optional[str] = Field(alias="line2", default=None)
    line_3: Optional[str] = Field(alias="line3", default=None)
    line_4: Optional[str] = Field(alias="line4", default=None)
    line_5: Optional[str] = Field(alias="line5", default=None)


class CustomerDetailsInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    title: Optional[str] = None
    pronouns: Optional[str] = None
    email: Optional[str] = None
    mobile: Optional[str] = None
    landline: Optional[str] = None
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth", default=None)
    preferences: Optional["UpdateAccountUserCommsPreferencesInput"] = None


class UpdateAccountUserCommsPreferencesInput(BaseModel):
    is_opted_in_to_client_messages: Optional[bool] = Field(
        alias="isOptedInToClientMessages", default=None
    )
    is_opted_in_to_offer_messages: Optional[bool] = Field(
        alias="isOptedInToOfferMessages", default=None
    )
    is_opted_in_to_recommended_messages: Optional[bool] = Field(
        alias="isOptedInToRecommendedMessages", default=None
    )
    is_opted_in_to_update_messages: Optional[bool] = Field(
        alias="isOptedInToUpdateMessages", default=None
    )
    is_opted_in_to_third_party_messages: Optional[bool] = Field(
        alias="isOptedInToThirdPartyMessages", default=None
    )
    email_format: Optional[EmailFormats] = Field(alias="emailFormat", default=None)
    is_using_inverted_email_colours: Optional[bool] = Field(
        alias="isUsingInvertedEmailColours", default=None
    )
    font_size_multiplier: Optional[float] = Field(
        alias="fontSizeMultiplier", default=None
    )
    is_opted_in_meter_reading_confirmations: Optional[bool] = Field(
        alias="isOptedInMeterReadingConfirmations", default=None
    )
    is_opted_in_to_sms_messages: Optional[bool] = Field(
        alias="isOptedInToSmsMessages", default=None
    )
    preferred_hold_music: Optional[Songs] = Field(
        alias="preferredHoldMusic", default=None
    )


class SalesInformationInput(BaseModel):
    affiliate_session_id: Optional[str] = Field(
        alias="affiliateSessionId", default=None
    )
    urn: Optional[str] = None
    referral_code: Optional[str] = Field(alias="referralCode", default=None)


class EnrollmentInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    bank_details: Optional["BankDetailsInput"] = Field(
        alias="bankDetails", default=None
    )
    instruction_details: Optional["InstructionDetailsInput"] = Field(
        alias="instructionDetails", default=None
    )
    payment_schedule: Optional["PaymentScheduleDetailsInput"] = Field(
        alias="paymentSchedule", default=None
    )
    sales_info: Optional["SalesInformationInput"] = Field(
        alias="salesInfo", default=None
    )


class InstructionDetailsInput(BaseModel):
    vendor_name: Vendor = Field(alias="vendorName")
    instruction_type: PaymentType = Field(alias="instructionType")
    valid_from: Any = Field(alias="validFrom")
    vendor_reference: str = Field(alias="vendorReference")


class PaymentScheduleDetailsInput(BaseModel):
    regular_triggered: Optional["RegularTriggeredScheduleInput"] = Field(
        alias="regularTriggered", default=None
    )
    bill_triggered: Optional["BillTriggeredScheduleInput"] = Field(
        alias="billTriggered", default=None
    )
    balance_triggered: Optional["BalanceTriggeredScheduleInput"] = Field(
        alias="balanceTriggered", default=None
    )
    bill_triggered_balance_target: Optional[
        "BillTriggeredBalanceTargetScheduleInput"
    ] = Field(alias="billTriggeredBalanceTarget", default=None)


class RegularTriggeredScheduleInput(BaseModel):
    payment_day: Optional[int] = Field(alias="paymentDay", default=None)
    frequency: Optional[ScheduleFrequencyEnum] = None
    frequency_multiplier: Optional[int] = Field(
        alias="frequencyMultiplier", default=None
    )


class BillTriggeredScheduleInput(BaseModel):
    payment_day: Optional[int] = Field(alias="paymentDay", default=None)
    frequency_multiplier: Optional[int] = Field(
        alias="frequencyMultiplier", default=None
    )


class BalanceTriggeredScheduleInput(BaseModel):
    balance_threshold: int = Field(alias="balanceThreshold")
    target_balance: Optional[int] = Field(alias="targetBalance", default=None)


class BillTriggeredBalanceTargetScheduleInput(BaseModel):
    target_balance: Optional[int] = Field(alias="targetBalance", default=None)


class JoinSupplierAcceptTermsAndConditionsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    join_supplier_process_id: int = Field(alias="joinSupplierProcessId")


class NewLeadInputType(BaseModel):
    source: Optional[str] = None
    phone: Optional[str] = None
    email: Optional[str] = None
    name: Optional[str] = None
    lead_type: Optional[str] = Field(alias="leadType", default=None)
    market_name: Optional[str] = Field(alias="marketName", default=None)


class UpdateLeadStateInput(BaseModel):
    lead_id: Optional[str] = Field(alias="leadId", default=None)
    stage: Optional[str] = None
    latest_action: Optional[str] = Field(alias="latestAction", default=None)


class UpdateExtraDetailsInput(BaseModel):
    lead_id: Optional[str] = Field(alias="leadId", default=None)
    items: Optional[List[Optional["_UpdateExtraDetailsItem"]]] = None


class _UpdateExtraDetailsItem(BaseModel):
    key: Optional[str] = None
    value: Optional[str] = None


class GetOrCreateShellAccountForLeadInput(BaseModel):
    lead_id: Optional[str] = Field(alias="leadId", default=None)


class CompleteLeadActionInput(BaseModel):
    lead_id: Optional[str] = Field(alias="leadId", default=None)
    action: Optional[str] = None
    transition_to_stage: Optional[str] = Field(alias="transitionToStage", default=None)


class SetLeadOutcomeInput(BaseModel):
    lead_id: Optional[str] = Field(alias="leadId", default=None)
    outcome: Optional[str] = None


class AssignInkBucketInput(BaseModel):
    conversation_relay_id: str = Field(alias="conversationRelayId")
    bucket_name: str = Field(alias="bucketName")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class UpdateMessageTagsInput(BaseModel):
    message_relay_id: str = Field(alias="messageRelayId")
    tag_names: List[str] = Field(alias="tagNames")
    tagger_code: str = Field(alias="taggerCode")
    tagger_version: str = Field(alias="taggerVersion")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class CreateInkInboundMessageInput(BaseModel):
    channel: InkCommunicationChannel
    message_id: str = Field(alias="messageId")
    new_message: "InkMessageInput" = Field(alias="newMessage")
    vendor: Optional[str] = None
    message_headers: Optional[Any] = Field(alias="messageHeaders", default=None)
    occurred_at: Optional[Any] = Field(alias="occurredAt", default=None)
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class InkMessageInput(BaseModel):
    generic: Optional["InkGenericMessageInput"] = None
    email: Optional["InkEmailMessageInput"] = None
    post: Optional["InkPostMessageInput"] = None


class InkGenericMessageInput(BaseModel):
    plain_text_content: str = Field(alias="plainTextContent")
    attachments: Optional[List["InkGenericMessageAttachmentInput"]] = None
    from_handle: str = Field(alias="fromHandle")
    to_handle: str = Field(alias="toHandle")


class InkGenericMessageAttachmentInput(BaseModel):
    s_3_key: str = Field(alias="s3Key")
    s_3_bucket: str = Field(alias="s3Bucket")


class InkEmailMessageInput(BaseModel):
    plain_text_content: str = Field(alias="plainTextContent")
    attachments: Optional[List["InkGenericMessageAttachmentInput"]] = None
    subject: str
    from_address: Any = Field(alias="fromAddress")
    to_addresses: List[Any] = Field(alias="toAddresses")
    cc_addresses: Optional[List[Any]] = Field(alias="ccAddresses", default=None)
    s_3_bucket: Optional[str] = Field(alias="s3Bucket", default=None)
    s_3_key: Optional[str] = Field(alias="s3Key", default=None)


class InkPostMessageInput(BaseModel):
    plain_text_content: str = Field(alias="plainTextContent")
    attachments: Optional[List["InkGenericMessageAttachmentInput"]] = None
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    notes: Optional[str] = None


class GenerateInkPresignedUrlInput(BaseModel):
    channel: InkCommunicationChannel
    filename: str


class CreateGoodsQuoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    products_to_quote: List["ProductToQuoteInput"] = Field(alias="productsToQuote")
    client_params: Optional[Any] = Field(alias="clientParams", default=None)
    market_params: Optional[Any] = Field(alias="marketParams", default=None)


class ProductToQuoteInput(BaseModel):
    product_id: str = Field(alias="productId")
    number_of_units: int = Field(alias="numberOfUnits")
    price_per_unit: Optional[int] = Field(alias="pricePerUnit", default=None)
    currency: str


class CreateGoodsQuoteWithoutAccountInput(BaseModel):
    customer_profile: "CustomerProfileInput" = Field(alias="customerProfile")
    products_to_quote: List["ProductToQuoteInput"] = Field(alias="productsToQuote")
    client_params: Optional[Any] = Field(alias="clientParams", default=None)
    market_params: Optional[Any] = Field(alias="marketParams", default=None)


class CustomerProfileInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    email: str
    phone_number: str = Field(alias="phoneNumber")
    postcode: str
    address_line_1: str = Field(alias="addressLine1")
    address_line_2: Optional[str] = Field(alias="addressLine2", default=None)
    address_line_3: Optional[str] = Field(alias="addressLine3", default=None)
    address_line_4: Optional[str] = Field(alias="addressLine4", default=None)
    address_line_5: Optional[str] = Field(alias="addressLine5", default=None)


class AcceptGoodsQuoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    quote_id: str = Field(alias="quoteId")
    client_params: Optional[Any] = Field(alias="clientParams", default=None)
    market_params: Optional[Any] = Field(alias="marketParams", default=None)


class ShareGoodsQuoteInput(BaseModel):
    quote_code: str = Field(alias="quoteCode")
    email: str


class CreatePurchaseInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    sale_items: List["ProductToPurchaseInput"] = Field(alias="saleItems")
    client_params: Optional[Any] = Field(alias="clientParams", default=None)
    market_params: Optional[Any] = Field(alias="marketParams", default=None)


class ProductToPurchaseInput(BaseModel):
    product_code: str = Field(alias="productCode")
    number_of_units: int = Field(alias="numberOfUnits")
    price_per_unit: Optional[int] = Field(alias="pricePerUnit", default=None)


class UpdatePurchaseInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    purchase_id: str = Field(alias="purchaseId")
    sale_items: List["ProductToPurchaseInput"] = Field(alias="saleItems")
    market_params: Optional[Any] = Field(alias="marketParams", default=None)
    client_params: Optional[Any] = Field(alias="clientParams", default=None)


class VerifyEmailInput(BaseModel):
    token: str


class SendVerificationEmailInput(BaseModel):
    email: str


class FormSubmissionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    form_type: Optional[FormType] = Field(alias="formType", default=None)
    content: Any


class UpdateCollectionProcessRecordToActiveInputType(BaseModel):
    number: str
    external_reference: Optional[str] = Field(alias="externalReference", default=None)


class UpdateCollectionProcessRecordToCompleteInputType(BaseModel):
    number: str
    completion_reason: Optional[CollectionProcessRecordCompletionTypeChoices] = Field(
        alias="completionReason", default=None
    )
    completion_details: Optional[str] = Field(alias="completionDetails", default=None)


class PauseDunningInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    path_name: str = Field(alias="pathName")
    start_date: Any = Field(alias="startDate")
    stop_date: Any = Field(alias="stopDate")
    note: Optional[str] = None


class WithdrawDunningInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    path_name: str = Field(alias="pathName")
    note: Optional[str] = None


class CommenceDCAProceedingInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    agency: str
    campaign: str
    is_white_label: bool = Field(alias="isWhiteLabel")
    date_started: str = Field(alias="dateStarted")
    amount: Optional[int] = None
    notes: Optional[str] = None


class CloseDCAProceedingInputType(BaseModel):
    account_number: str = Field(alias="accountNumber")
    stop_reason: str = Field(alias="stopReason")
    stopped_date: Any = Field(alias="stoppedDate")
    notify_dca: Optional[bool] = Field(alias="notifyDca", default=None)
    agency: str
    campaign: Optional[str] = None


class CustomerFeedbackInputType(BaseModel):
    answer: Optional[str] = None
    issue_resolved: bool = Field(alias="issueResolved")
    form_id: int = Field(alias="formId")
    feedback_id: int = Field(alias="feedbackId")
    account_number: str = Field(alias="accountNumber")


class CreateContributionAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    scheme_code: str = Field(alias="schemeCode")
    interval: Interval
    amount: int
    active_from: Any = Field(alias="activeFrom")
    active_to: Optional[Any] = Field(alias="activeTo", default=None)


class EndContributionAgreementInput(BaseModel):
    contribution_agreement_id: str = Field(alias="contributionAgreementId")
    end_at: Optional[Any] = Field(alias="endAt", default=None)


class ConsentInput(BaseModel):
    code: str
    value: ConsentValue


class InvalidatePreSignedTokenInput(BaseModel):
    token: str


class InvalidatePreSignedTokensForUserInput(BaseModel):
    email: str
    scope: Optional[PreSignedTokenScope] = None


class RequestPasswordResetInput(BaseModel):
    email: str


class ResetPasswordMutationInput(BaseModel):
    password: str
    user_id: str = Field(alias="userId")
    token: str
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class ResetUserPasswordInput(BaseModel):
    new_password: str = Field(alias="newPassword")
    user_id: str = Field(alias="userId")
    token: str


class ObtainJSONWebTokenInput(BaseModel):
    email: Optional[str] = None
    password: Optional[str] = None
    api_key: Optional[str] = Field(alias="APIKey", default=None)
    organization_secret_key: Optional[str] = Field(
        alias="organizationSecretKey", default=None
    )
    pre_signed_key: Optional[str] = Field(alias="preSignedKey", default=None)
    refresh_token: Optional[str] = Field(alias="refreshToken", default=None)


class ForceReauthenticationInput(BaseModel):
    include_third_parties: bool = Field(alias="includeThirdParties")


class ObtainLongLivedRefreshTokenInput(BaseModel):
    kraken_token: str = Field(alias="krakenToken")


class InvalidateRefreshTokenInput(BaseModel):
    refresh_token: str = Field(alias="refreshToken")


class InvalidateRefreshTokensForUserInput(BaseModel):
    email: str


class VerifyIdentityInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    full_name: str = Field(alias="fullName")
    first_line_of_address: str = Field(alias="firstLineOfAddress")
    postcode: str


class CreateAPIExceptionInput(BaseModel):
    external_identifier: str = Field(alias="externalIdentifier")
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus", default=None
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType", default=None
    )
    priority: Optional[APIExceptionPriority] = None
    context: Optional[Any] = None
    channel: str
    assigned_user_id: Optional[int] = Field(alias="assignedUserId", default=None)
    operations_team_id: Optional[int] = Field(alias="operationsTeamId", default=None)
    tags: Optional[List[Optional[APIExceptionTags]]] = None
    category: Optional[APIExceptionCategories] = None
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    user_id: Optional[int] = Field(alias="userId", default=None)
    customer_contact: Optional[str] = Field(alias="customerContact", default=None)
    supply_point_identifier: Optional[str] = Field(
        alias="supplyPointIdentifier", default=None
    )
    key_date: Optional[Any] = Field(alias="keyDate", default=None)


class UpdateAPIExceptionInput(BaseModel):
    id: int
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus", default=None
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType", default=None
    )
    priority: Optional[APIExceptionPriority] = None
    context: Optional[Any] = None
    category: Optional[APIExceptionCategories] = None
    tags: Optional[List[Optional[APIExceptionTags]]] = None
    key_date: Optional[Any] = Field(alias="keyDate", default=None)
    assigned_user_id: Optional[int] = Field(alias="assignedUserId", default=None)
    operations_team_id: Optional[int] = Field(alias="operationsTeamId", default=None)


class CreateAPICallInput(BaseModel):
    correlation_id: str = Field(alias="correlationId")
    operation_name: str = Field(alias="operationName")
    input_data: Optional[Any] = Field(alias="inputData", default=None)
    response: Any
    context: Optional[Any] = None
    api_exception_id: Optional[int] = Field(alias="apiExceptionId", default=None)


class CreateAPIExceptionEventInput(BaseModel):
    event_type: str = Field(alias="eventType")
    category: str
    description: str
    context: Optional[Any] = None
    api_exception_id: Optional[int] = Field(alias="apiExceptionId", default=None)


class CreateAPIExceptionNoteInput(BaseModel):
    body: str
    api_exception_id: str = Field(alias="apiExceptionId")


class UpdateAPIExceptionNoteInput(BaseModel):
    body: str
    api_exception_note_id: str = Field(alias="apiExceptionNoteId")


class RevokeAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    agreement_id: str = Field(alias="agreementId")
    reason: Optional[str] = None


class UpdateAgreementPeriodInput(BaseModel):
    agreement_id: str = Field(alias="agreementId")
    account_number: str = Field(alias="accountNumber")
    valid_from: Any = Field(alias="validFrom")
    valid_to: Optional[Any] = Field(alias="validTo", default=None)
    reason: Optional[str] = None


class CreateAffiliateLinkInputType(BaseModel):
    organisation_id: str = Field(alias="organisationId")
    subdomain: str
    contact_name: str = Field(alias="contactName")
    contact_email: str = Field(alias="contactEmail")


class UpdateAffiliateLinkInputType(BaseModel):
    link_id: str = Field(alias="linkId")
    organisation_id: Optional[str] = Field(alias="organisationId", default=None)
    subdomain: Optional[str] = None
    contact_name: Optional[str] = Field(alias="contactName", default=None)
    contact_email: Optional[str] = Field(alias="contactEmail", default=None)
    is_business: Optional[bool] = Field(alias="isBusiness", default=None)
    landing_url: Optional[str] = Field(alias="landingUrl", default=None)
    training_status: Optional[str] = Field(alias="trainingStatus", default=None)


class CreateAffiliateOrganisationInputType(BaseModel):
    name: str
    contact_email: Optional[str] = Field(alias="contactEmail", default=None)
    sales_channel: SalesChannelChoices = Field(alias="salesChannel")
    default_account_type: AccountTypeChoices = Field(alias="defaultAccountType")
    can_register_business_meter_points: Optional[bool] = Field(
        alias="canRegisterBusinessMeterPoints", default=None
    )
    can_register_portfolio_accounts: Optional[bool] = Field(
        alias="canRegisterPortfolioAccounts", default=None
    )
    can_register_customers_without_email_address: Optional[bool] = Field(
        alias="canRegisterCustomersWithoutEmailAddress", default=None
    )
    skip_meter_point_address_validation: Optional[bool] = Field(
        alias="skipMeterPointAddressValidation", default=None
    )
    allow_alternative_payment_methods: Optional[bool] = Field(
        alias="allowAlternativePaymentMethods", default=None
    )
    can_renew_tariffs: Optional[bool] = Field(alias="canRenewTariffs", default=None)
    can_use_ivr_support_api: Optional[bool] = Field(
        alias="canUseIvrSupportApi", default=None
    )
    is_field_sales_only_product: Optional[bool] = Field(
        alias="isFieldSalesOnlyProduct", default=None
    )


class UpdateAffiliateOrganisationInputType(BaseModel):
    organisation_id: str = Field(alias="organisationId")
    name: Optional[str] = None
    contact_email: Optional[str] = Field(alias="contactEmail", default=None)
    sales_channel: Optional[SalesChannelChoices] = Field(
        alias="salesChannel", default=None
    )
    default_account_type: Optional[AccountTypeChoices] = Field(
        alias="defaultAccountType", default=None
    )
    can_register_business_meter_points: Optional[bool] = Field(
        alias="canRegisterBusinessMeterPoints", default=None
    )
    can_register_portfolio_accounts: Optional[bool] = Field(
        alias="canRegisterPortfolioAccounts", default=None
    )
    can_register_customers_without_email_address: Optional[bool] = Field(
        alias="canRegisterCustomersWithoutEmailAddress", default=None
    )
    skip_meter_point_address_validation: Optional[bool] = Field(
        alias="skipMeterPointAddressValidation", default=None
    )
    allow_alternative_payment_methods: Optional[bool] = Field(
        alias="allowAlternativePaymentMethods", default=None
    )
    can_renew_tariffs: Optional[bool] = Field(alias="canRenewTariffs", default=None)
    can_use_ivr_support_api: Optional[bool] = Field(
        alias="canUseIvrSupportApi", default=None
    )
    is_field_sales_only_product: Optional[bool] = Field(
        alias="isFieldSalesOnlyProduct", default=None
    )


class CreateAffiliateSessionInputType(BaseModel):
    link_id: str = Field(alias="linkId")
    ip_address: Optional[str] = Field(alias="ipAddress", default=None)
    user_agent: Optional[str] = Field(alias="userAgent", default=None)
    query_params: Optional[Any] = Field(alias="queryParams", default=None)
    quote_share_id: Optional[str] = Field(alias="quoteShareId", default=None)


class UpdateAccountUserMutationInput(BaseModel):
    given_name: Optional[str] = Field(alias="givenName", default=None)
    family_name: Optional[str] = Field(alias="familyName", default=None)
    pronouns: Optional[str] = None
    mobile: Optional[str] = None
    email: Optional[str] = None
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth", default=None)
    landline: Optional[str] = None
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class UpdateAccountUserCommsPreferencesMutationInput(BaseModel):
    is_opted_in_to_client_messages: Optional[bool] = Field(
        alias="isOptedInToClientMessages", default=None
    )
    is_opted_in_to_offer_messages: Optional[bool] = Field(
        alias="isOptedInToOfferMessages", default=None
    )
    is_opted_in_to_recommended_messages: Optional[bool] = Field(
        alias="isOptedInToRecommendedMessages", default=None
    )
    is_opted_in_to_update_messages: Optional[bool] = Field(
        alias="isOptedInToUpdateMessages", default=None
    )
    is_opted_in_to_third_party_messages: Optional[bool] = Field(
        alias="isOptedInToThirdPartyMessages", default=None
    )
    is_opted_in_meter_reading_confirmations: Optional[bool] = Field(
        alias="isOptedInMeterReadingConfirmations", default=None
    )
    is_opted_in_to_sms_messages: Optional[bool] = Field(
        alias="isOptedInToSmsMessages", default=None
    )
    is_using_inverted_email_colours: Optional[bool] = Field(
        alias="isUsingInvertedEmailColours", default=None
    )
    font_size_multiplier: Optional[float] = Field(
        alias="fontSizeMultiplier", default=None
    )
    email_format: Optional[str] = Field(alias="emailFormat", default=None)
    preferred_hold_music: Optional[str] = Field(
        alias="preferredHoldMusic", default=None
    )
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class ConsentTypeInput(BaseModel):
    consent_type_code: str = Field(alias="consentTypeCode")
    value: Optional[ConsentValue] = None


class UpdatePasswordInput(BaseModel):
    old_password: str = Field(alias="oldPassword")
    new_password: str = Field(alias="newPassword")
    new_password_confirmed: str = Field(alias="newPasswordConfirmed")


class UpdateUserInput(BaseModel):
    given_name: Optional[str] = Field(alias="givenName", default=None)
    family_name: Optional[str] = Field(alias="familyName", default=None)
    pronouns: Optional[str] = None
    email: Optional[str] = None
    mobile: Optional[str] = None
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth", default=None)
    landline: Optional[str] = None
    user_id: Optional[str] = Field(alias="userId", default=None)
    title: Optional[str] = None
    details: Optional[List[Optional["DetailsInputType"]]] = None


class DetailsInputType(BaseModel):
    namespace: str
    value: Optional[str] = None


class RegisterPushNotificationBindingInput(BaseModel):
    token: str
    bundle_id: str = Field(alias="bundleId")
    expires_at: Optional[Any] = Field(alias="expiresAt", default=None)


class DeletePushNotificationBindingInput(BaseModel):
    token: str


class CreateAccountReminderInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reminder_type: AccountReminderTypes = Field(alias="reminderType")
    content: str
    due_at: Any = Field(alias="dueAt")


class AccountReferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    namespace: str
    value: str


class DeleteAccountReferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    namespace: str


class CreateExternalAccountEventInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    category: ExternalAccountEventCategory
    subcategory: Optional[ExternalAccountEventSubCategory] = None
    description: Optional[str] = None
    occurred_at: Optional[Any] = Field(alias="occurredAt", default=None)
    content: List["ExternalAccountEventContent"]


class ExternalAccountEventContent(BaseModel):
    description: str
    content_type: ExternalAccountEventContentType = Field(alias="contentType")
    value: str


class CreateExternalAccountUserEventInput(BaseModel):
    user_id: str = Field(alias="userId")
    category: ExternalAccountEventCategory
    subcategory: Optional[ExternalAccountEventSubCategory] = None
    description: Optional[str] = None
    occurred_at: Optional[Any] = Field(alias="occurredAt", default=None)
    content: List["ExternalAccountEventContent"]


class CreateAccountCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    gross_amount: int = Field(alias="grossAmount")
    sales_tax_amount: int = Field(alias="salesTaxAmount")
    metadata: Optional[Any] = None
    note: Optional[str] = None
    reason: AccountCreditReasonType


class PostCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    tax_amount: int = Field(alias="taxAmount")
    display_note: Optional[str] = Field(alias="displayNote", default=None)
    note: Optional[str] = None
    reason: str
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class CreateAccountChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    gross_amount: int = Field(alias="grossAmount")
    metadata: Optional[Any] = None
    note: Optional[str] = None
    display_note: Optional[str] = Field(alias="displayNote", default=None)
    reason: str


class TransferLedgerBalanceInputType(BaseModel):
    source_account_ledger: "AccountLedgerInput" = Field(alias="sourceAccountLedger")
    target_account_ledger: "AccountLedgerInput" = Field(alias="targetAccountLedger")
    amount: int
    note: Optional[str] = None


class AccountLedgerInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    ledger_number: Optional[str] = Field(alias="ledgerNumber", default=None)


class RequestPrintedBillInput(BaseModel):
    billing_document_id: str = Field(alias="billingDocumentId")
    account_number: str = Field(alias="accountNumber")


class MetadataInput(BaseModel):
    identifier: str
    linked_object_type: LinkedObjectType = Field(alias="linkedObjectType")
    key: str
    value: Any


class QueryComplexityInputType(BaseModel):
    query: str
    variables: Optional[Any] = None
    operation_name: Optional[str] = Field(alias="operationName", default=None)


class PossibleErrorsInputType(BaseModel):
    name: str
    type: query_type
    auth_errors: Optional[bool] = Field(alias="authErrors", default=None)


class APIBrownoutInput(BaseModel):
    statuses: Optional[List[Optional[APIBrownoutStatus]]] = None


class APIExceptionQueryInput(BaseModel):
    external_identifier: Optional[str] = Field(alias="externalIdentifier", default=None)
    resolution_status: Optional[APIExceptionResolutionStatus] = Field(
        alias="resolutionStatus", default=None
    )
    resolution_type: Optional[APIExceptionResolutionType] = Field(
        alias="resolutionType", default=None
    )
    channel: Optional[str] = None
    priority: Optional[APIExceptionPriority] = None
    tags: Optional[List[Optional[APIExceptionTags]]] = None
    category: Optional[APIExceptionCategories] = None
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    user_id: Optional[str] = Field(alias="userId", default=None)
    customer_contact: Optional[str] = Field(alias="customerContact", default=None)
    supply_point_identifier: Optional[str] = Field(
        alias="supplyPointIdentifier", default=None
    )


class AccountSearchInputType(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    portfolio_number: Optional[str] = Field(alias="portfolioNumber", default=None)
    urn: Optional[str] = None
    user: Optional[str] = None
    account: Optional[str] = None
    statements: Optional[str] = None
    meter_serial_number: Optional[str] = Field(alias="meterSerialNumber", default=None)
    location: Optional[str] = None
    billing_name: Optional[str] = Field(alias="billingName", default=None)
    business_name: Optional[str] = Field(alias="businessName", default=None)
    business_number: Optional[str] = Field(alias="businessNumber", default=None)
    account_references: Optional[str] = Field(alias="accountReferences", default=None)
    mpan: Optional[str] = None
    mprn: Optional[str] = None
    telephone_number: Optional[str] = Field(alias="telephoneNumber", default=None)


class CreatePortfolioUserRoleInput(BaseModel):
    portfolio_id: str = Field(alias="portfolioId")
    account_user_id: str = Field(alias="accountUserId")
    role: Optional[Any] = None


class JoinFanClubInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    catchments: List[str]
    capped_catchments: Optional[List[Optional[str]]] = Field(
        alias="cappedCatchments", default=None
    )
    email: str


class FanClubDiscountNotificationInput(BaseModel):
    catchments: List[str]
    start_at: Any = Field(alias="startAt")
    end_at: Any = Field(alias="endAt")


class FanClubNonOctopusCustomerCommsInput(BaseModel):
    email: str
    eligibility: str


class WheelOfFortuneSpinInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    supply_type: SupplyType = Field(alias="supplyType")
    terms_accepted: bool = Field(alias="termsAccepted")


class CreateAccountFileAttachmentInput(BaseModel):
    filename: str
    account_number: str = Field(alias="accountNumber")
    category: Category
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class BatteryChargingPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    minimum_soc_percentage: int = Field(alias="minimumSocPercentage")


class ProvisioningClaimRequestParameters(BaseModel):
    euid: str
    timestamp: str
    nonce: str
    signature: str


class SetZoneModeParameters(BaseModel):
    zone: Zone
    mode: Mode
    setpoint_in_celsius: Optional[Any] = Field(alias="setpointInCelsius", default=None)
    schedule_override_action: Optional[SettingAction] = Field(
        alias="scheduleOverrideAction", default=None
    )
    end_at: Optional[Any] = Field(alias="endAt", default=None)


class SetZoneSchedulesParameters(BaseModel):
    zone: Zone
    schedules: List["ZoneSchedule"]


class ZoneSchedule(BaseModel):
    days: str
    settings: List["ScheduleSettings"]


class ScheduleSettings(BaseModel):
    time: Any
    action: str
    setpoint_in_celsius: Optional[Any] = Field(alias="setpointInCelsius", default=None)


class SensorDisplayNameUpdate(BaseModel):
    sensor_code: str = Field(alias="sensorCode")
    new_display_name: str = Field(alias="newDisplayName")


class SetZonePrimarySensorParameters(BaseModel):
    zone: Zone
    sensor_code: str = Field(alias="sensorCode")


class FlowTemperatureInput(BaseModel):
    use_weather_compensation: bool = Field(alias="useWeatherCompensation")
    weather_compensation_values: Optional["TemperatureRangeInput"] = Field(
        alias="weatherCompensationValues", default=None
    )
    flow_temperature: Optional["TemperatureInput"] = Field(
        alias="flowTemperature", default=None
    )


class TemperatureRangeInput(BaseModel):
    minimum: "TemperatureInput"
    maximum: "TemperatureInput"


class TemperatureInput(BaseModel):
    value: Any
    unit: TemperatureUnit


class RoomTemperatureInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    temperature: float


class HotWaterStateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    state: bool


class ClimateControlStateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    state: bool


class JoinSavingSessionsCampaignInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: str


class JoinSavingSessionsEventInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    event_code: str = Field(alias="eventCode")


class AcceptTermsAndConditionsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    enrolment_id: str = Field(alias="enrolmentId")
    terms_version: "TermsVersionInput" = Field(alias="termsVersion")


class TermsVersionInput(BaseModel):
    version_major: int = Field(alias="versionMajor")
    version_minor: int = Field(alias="versionMinor")


class SavingSessionsEnrolmentOptions(BaseModel):
    should_enrol: Optional[bool] = Field(alias="shouldEnrol", default=None)
    nominated_mpan: Optional[str] = Field(alias="nominatedMpan", default=None)


class RedeemOctoPointsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class SendLossObjectionForChangeOfSupplierInput(BaseModel):
    cos_loss_process_id: int = Field(alias="cosLossProcessId")
    fuel_type: str = Field(alias="fuelType")


class UpdateSiteworksRequestInputType(BaseModel):
    id: Any
    status: RequestStatus


class OCPPAuthenticationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    details: str


class ReauthenticateDeviceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    authentication: "AuthenticationInput"
    device_type: KrakenFlexDeviceTypes = Field(alias="deviceType")


class VehicleChargingPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    weekday_target_time: str = Field(alias="weekdayTargetTime")
    weekday_target_soc: int = Field(alias="weekdayTargetSoc")
    weekend_target_time: str = Field(alias="weekendTargetTime")
    weekend_target_soc: int = Field(alias="weekendTargetSoc")
    target_type: Optional[str] = Field(alias="targetType", default=None)


class AccountNumberInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class DeleteBoostChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")


class SelectVehicleMakeInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class SelectVehicleVariantInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class SelectChargePointMakeInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class SelectChargePointVariantInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class SelectUserVehicleInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class CompleteSmartFlexOnboardingStepInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")


class DeAuthenticationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_type: Optional[KrakenFlexDeviceTypes] = Field(
        alias="deviceType", default=None
    )


class DeviceRegistrationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    device_type: KrakenFlexDeviceTypes = Field(alias="deviceType")
    provider: ProviderChoices
    device_details: Optional["DeviceDetailsInput"] = Field(
        alias="deviceDetails", default=None
    )
    authentication: Optional["AuthenticationInput"] = None


class DeviceDetailsInput(BaseModel):
    device_variant_id: Optional[str] = Field(alias="deviceVariantId", default=None)
    aux_device_variant_id: Optional[str] = Field(
        alias="auxDeviceVariantId", default=None
    )


class AuthenticationInput(BaseModel):
    access_token: Optional[str] = Field(alias="accessToken", default=None)
    authorization_code: Optional[str] = Field(alias="authorizationCode", default=None)
    refresh_token: Optional[str] = Field(alias="refreshToken", default=None)
    expires_in: Optional[int] = Field(alias="expiresIn", default=None)
    state: Optional[str] = None
    provider_device_id: Optional[str] = Field(alias="providerDeviceId", default=None)
    redirect_uri: Optional[str] = Field(alias="redirectUri", default=None)


class CompleteDeviceRegistrationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    postal_code: str = Field(alias="postalCode")
    external_device_identifier: str = Field(alias="externalDeviceIdentifier")


class StartSmartFlexOnboardingInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")


class CancelSmartFlexOnboardingInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")


class SmartControlInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    action: SmartControlAction


class SmartFlexDevicePreferencesInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    mode: PreferencesModeChoices
    unit: PreferencesUnitChoices
    schedules: List["PreferencesScheduleInput"]


class PreferencesScheduleInput(BaseModel):
    day_of_week: DayOfWeek = Field(alias="dayOfWeek")
    time: Any
    min: Optional[Any] = None
    max: Any


class SelectDeviceTypeInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    selected_option: str = Field(alias="selectedOption")


class CompleteAuthFlowInput(BaseModel):
    wizard_id: str = Field(alias="wizardId")
    step_id: str = Field(alias="stepId")
    continuation_uri: str = Field(alias="continuationUri")


class SmartMeterDeviceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")


class QuoteCampaignOfferInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    campaign_slug: str = Field(alias="campaignSlug")


class UtilityFiltersInput(BaseModel):
    electricity_filters: Optional["ElectricityFiltersInput"] = Field(
        alias="electricityFilters", default=None
    )
    gas_filters: Optional["GasFiltersInput"] = Field(alias="gasFilters", default=None)


class ElectricityFiltersInput(BaseModel):
    reading_frequency_type: Optional[ReadingFrequencyType] = Field(
        alias="readingFrequencyType", default=None
    )
    market_supply_point_id: Optional[str] = Field(
        alias="marketSupplyPointId", default=None
    )
    device_id: Optional[str] = Field(alias="deviceId", default=None)
    reading_direction: Optional[ReadingDirectionType] = Field(
        alias="readingDirection", default=None
    )
    register_id: Optional[str] = Field(alias="registerId", default=None)
    reading_quality: Optional[ReadingQualityType] = Field(
        alias="readingQuality", default=None
    )


class GasFiltersInput(BaseModel):
    reading_frequency_type: Optional[ReadingFrequencyType] = Field(
        alias="readingFrequencyType", default=None
    )
    market_supply_point_id: Optional[str] = Field(
        alias="marketSupplyPointId", default=None
    )
    device_id: Optional[str] = Field(alias="deviceId", default=None)
    register_id: Optional[str] = Field(alias="registerId", default=None)


class ReplaceAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpxn: str
    replace_on_date: Any = Field(alias="replaceOnDate")
    new_product_code: str = Field(alias="newProductCode")


class FitMeterReadingInput(BaseModel):
    installations: List["FitInstallationInput"]


class FitInstallationInput(BaseModel):
    fit_id: str = Field(alias="fitId")
    meters: List["FitMeterInput"]


class FitMeterInput(BaseModel):
    id: int
    reading: "FitReadingInput"


class FitReadingInput(BaseModel):
    value: Any
    read_at: Any = Field(alias="readAt")
    is_biennial: Optional[bool] = Field(alias="isBiennial", default=None)


class FitAcceptScheduleInput(BaseModel):
    schedule_id: Any = Field(alias="scheduleId")
    account_number: str = Field(alias="accountNumber")


class CreateHeatPumpGoodsQuoteInput(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    product_id: int = Field(alias="productId")
    address_details: "AddressDetailsInput" = Field(alias="addressDetails")
    contact_details: "ContactDetailsInput" = Field(alias="contactDetails")
    property_details: "PropertyDetailsInput" = Field(alias="propertyDetails")


class AddressDetailsInput(BaseModel):
    uprn: Optional[str] = None
    address_line_1: str = Field(alias="addressLine1")
    address_line_2: str = Field(alias="addressLine2")
    address_line_3: Optional[str] = Field(alias="addressLine3", default=None)
    address_line_4: Optional[str] = Field(alias="addressLine4", default=None)
    address_line_5: Optional[str] = Field(alias="addressLine5", default=None)
    postcode: str


class ContactDetailsInput(BaseModel):
    first_name: str = Field(alias="firstName")
    last_name: str = Field(alias="lastName")
    email: str
    phone: str
    consent_to_mbna: Optional[bool] = Field(alias="consentToMbna", default=None)


class PropertyDetailsInput(BaseModel):
    property_type: HeatPumpPropertyType = Field(alias="propertyType")
    heat_type: HeatPumpHeatType = Field(alias="heatType")
    has_outdoor_space_for_heat_pump: Optional[bool] = Field(
        alias="hasOutdoorSpaceForHeatPump", default=None
    )
    has_indoor_space_for_cylinder: Optional[bool] = Field(
        alias="hasIndoorSpaceForCylinder", default=None
    )
    is_home_renovation: Optional[bool] = Field(alias="isHomeRenovation", default=None)


class CreateEvPublicChargingAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    external_account_id: str = Field(alias="externalAccountId")
    valid_from: Any = Field(alias="validFrom")


class AddEvPublicChargingTokenInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    token_value: str = Field(alias="tokenValue")
    valid_from: Any = Field(alias="validFrom")


class ExpireEvPublicChargingTokenInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    token_value: str = Field(alias="tokenValue")
    valid_to: Any = Field(alias="validTo")


class PostEVPublicChargingChargeInput(BaseModel):
    token_value: str = Field(alias="tokenValue")
    line_items: List["EVPCLineItem"] = Field(alias="lineItems")
    tax_items: List["EVPCTaxItem"] = Field(alias="taxItems")


class EVPCLineItem(BaseModel):
    amount: int
    period_start_at: Any = Field(alias="periodStartAt")
    period_end_at: Any = Field(alias="periodEndAt")
    band: ProductRateBands
    metadata: Optional[Any] = None


class EVPCTaxItem(BaseModel):
    amount: int
    amount_taxed: int = Field(alias="amountTaxed")
    rate: Any
    unit_type: TaxUnitType = Field(alias="unitType")
    tax_type: str = Field(alias="taxType")
    metadata: Optional[Any] = None


class PostEVPublicChargingAccountChargeInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    line_items: List["EVPCLineItem"] = Field(alias="lineItems")
    tax_items: List["EVPCTaxItem"] = Field(alias="taxItems")


class PostEVPublicChargingCreditInput(BaseModel):
    external_account_id: str = Field(alias="externalAccountId")
    net_amount: int = Field(alias="netAmount")
    tax_amount: int = Field(alias="taxAmount")
    reason: AccountCreditReasonType
    display_note: Optional[str] = Field(alias="displayNote", default=None)


class CreateElectricJuiceAgreementInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    valid_from: Optional[Any] = Field(alias="validFrom", default=None)


class CreateElectricJuiceChargeCardInput(BaseModel):
    charge_card_uid: str = Field(alias="chargeCardUid")
    name_on_card: str = Field(alias="nameOnCard")
    account_number: str = Field(alias="accountNumber")


class AddressSearchType(BaseModel):
    address_line_1: str = Field(alias="addressLine1")
    address_line_2: str = Field(alias="addressLine2")
    address_line_3: str = Field(alias="addressLine3")
    town: str
    county: str
    postcode: str


class StoreElectricJuicePaymentInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    valid_from: Any = Field(alias="validFrom")
    vendor_reference: str = Field(alias="vendorReference")


class CreateInkChatbotMessageInput(BaseModel):
    message_id: str = Field(alias="messageId")
    new_message: "InkMessageInput" = Field(alias="newMessage")
    message_headers: Optional[Any] = Field(alias="messageHeaders", default=None)
    occurred_at: Optional[Any] = Field(alias="occurredAt", default=None)
    account_number: str = Field(alias="accountNumber")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class HandoffInkConversationInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class CalculateDepositAmountInput(BaseModel):
    payment_multiplier: int = Field(alias="paymentMultiplier")
    monthly_amount: int = Field(alias="monthlyAmount")


class CheckBusinessCreditRiskInput(BaseModel):
    business_type: BusinessTypeEnum = Field(alias="businessType")
    company_number: Optional[str] = Field(alias="companyNumber", default=None)


class CreateProductRatesInputType(BaseModel):
    product_rates: List["ProductRateInputType"] = Field(alias="productRates")


class ProductRateInputType(BaseModel):
    valid_from: Any = Field(alias="validFrom")
    valid_to: Optional[Any] = Field(alias="validTo", default=None)
    band_category: LimitedBandCategories = Field(alias="bandCategory")
    band_subcategory: Optional[AllBandSubCategories] = Field(
        alias="bandSubcategory", default=None
    )
    price_per_unit: Any = Field(alias="pricePerUnit")
    gsp: GSPGroupIdsOptions
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )


class QuoteNewMeterPointsInput(BaseModel):
    electricity_meter_points_input: Optional[List["ElectricityMeterPointInput"]] = (
        Field(alias="electricityMeterPointsInput", default=None)
    )
    gas_meter_points_input: Optional[List["GasMeterPointInput"]] = Field(
        alias="gasMeterPointsInput", default=None
    )
    new_account_input: "NewAccountInput" = Field(alias="newAccountInput")
    product_tags: Optional[List[str]] = Field(alias="productTags", default=None)


class ElectricityMeterPointInput(BaseModel):
    mpan: Optional[str] = None
    consumption: Optional["ElectricityConsumptionInput"] = None
    meter_type: Optional[MeterType] = Field(alias="meterType", default=None)
    gsp_id: Optional[str] = Field(alias="gspId", default=None)
    flat_rate: Optional[bool] = Field(alias="flatRate", default=None)


class ElectricityConsumptionInput(BaseModel):
    standard: Optional[int] = None
    day: Optional[int] = None
    night: Optional[int] = None
    off_peak: Optional[int] = Field(alias="offPeak", default=None)
    is_estimate: Optional[bool] = Field(alias="isEstimate", default=None)


class GasMeterPointInput(BaseModel):
    mprn: Optional[str] = None
    consumption: Optional["GasConsumptionInput"] = None
    gsp_id: Optional[str] = Field(alias="gspId", default=None)


class GasConsumptionInput(BaseModel):
    value: int
    is_estimate: Optional[bool] = Field(alias="isEstimate", default=None)


class NewAccountInput(BaseModel):
    account_type: AccountTypeChoices = Field(alias="accountType")
    brand_code: str = Field(alias="brandCode")
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )
    affiliate_session_id: Optional[str] = Field(
        alias="affiliateSessionId", default=None
    )


class QuoteNewMeterPointsOnBespokeProductsInput(BaseModel):
    electricity_meter_points_input: Optional[
        List["ElectricityMeterPointProductsInput"]
    ] = Field(alias="electricityMeterPointsInput", default=None)
    gas_meter_points_input: Optional[List["GasMeterPointProductsInput"]] = Field(
        alias="gasMeterPointsInput", default=None
    )
    new_account_input: "NewAccountInput" = Field(alias="newAccountInput")


class ElectricityMeterPointProductsInput(BaseModel):
    mpan: Optional[str] = None
    consumption: Optional["ElectricityConsumptionInput"] = None
    meter_type: Optional[MeterType] = Field(alias="meterType", default=None)
    gsp_id: Optional[str] = Field(alias="gspId", default=None)
    flat_rate: Optional[bool] = Field(alias="flatRate", default=None)
    products_input: List["ElectricityProductInput"] = Field(alias="productsInput")


class ElectricityProductInput(BaseModel):
    code: Optional[str] = None
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )
    bespoke_rates: Optional["ElectricityBespokeRates"] = Field(
        alias="bespokeRates", default=None
    )


class ElectricityBespokeRates(BaseModel):
    standard: Optional[Any] = None
    day: Optional[Any] = None
    night: Optional[Any] = None
    off_peak: Optional[Any] = Field(alias="offPeak", default=None)
    standing_charge: Any = Field(alias="standingCharge")


class GasMeterPointProductsInput(BaseModel):
    mprn: Optional[str] = None
    consumption: Optional["GasConsumptionInput"] = None
    gsp_id: Optional[str] = Field(alias="gspId", default=None)
    products_input: List["GasProductInput"] = Field(alias="productsInput")


class GasProductInput(BaseModel):
    code: Optional[str] = None
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )
    bespoke_rates: Optional["GasBespokeRates"] = Field(
        alias="bespokeRates", default=None
    )


class GasBespokeRates(BaseModel):
    value: Any
    standing_charge: Any = Field(alias="standingCharge")


class QuoteAccountOnProductsInput(BaseModel):
    electricity_meter_points_input: Optional[
        List["ElectricityMeterPointProductsInput"]
    ] = Field(alias="electricityMeterPointsInput", default=None)
    gas_meter_points_input: Optional[List["GasMeterPointProductsInput"]] = Field(
        alias="gasMeterPointsInput", default=None
    )
    account_number: str = Field(alias="accountNumber")
    at: Optional[Any] = None
    agreed_to: Optional[Any] = Field(alias="agreedTo", default=None)


class CreateRenewalQuoteRequestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    renewal_at: Any = Field(alias="renewalAt")


class CreateQuoteRequestForProductsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: int = Field(alias="propertyId")
    product_codes: List[str] = Field(alias="productCodes")
    renewal_at: Any = Field(alias="renewalAt")
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate", default=None)
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )


class CreateAcquisitionQuoteRequestForProductsInput(BaseModel):
    electricity_meter_points: Optional[
        List[Optional["ElectricityMeterPointConsumptionInput"]]
    ] = Field(alias="electricityMeterPoints", default=None)
    gas_meter_points: Optional[List[Optional["GasMeterPointConsumptionInput"]]] = Field(
        alias="gasMeterPoints", default=None
    )
    postcode: str
    product_codes: List[str] = Field(alias="productCodes")
    payment_method: Optional[PaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )


class ElectricityMeterPointConsumptionInput(BaseModel):
    profile_class: Optional[int] = Field(alias="profileClass", default=None)
    mpan: Optional[str] = None
    is_estimate: bool = Field(alias="isEstimate")
    annual_consumption_standard: Optional[int] = Field(
        alias="annualConsumptionStandard", default=None
    )
    annual_consumption_day: Optional[int] = Field(
        alias="annualConsumptionDay", default=None
    )
    annual_consumption_night: Optional[int] = Field(
        alias="annualConsumptionNight", default=None
    )


class GasMeterPointConsumptionInput(BaseModel):
    mprn: Optional[str] = None
    is_estimate: bool = Field(alias="isEstimate")
    annual_consumption: Optional[int] = Field(alias="annualConsumption", default=None)


class RefundRequestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    requested_amount: int = Field(alias="requestedAmount")


class UpdateSmartMeterDataPreferencesInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    reading_frequency: SmartMeterReadingFrequencyChoices = Field(
        alias="readingFrequency"
    )
    allow_readings_analysis: Optional[bool] = Field(
        alias="allowReadingsAnalysis", default=None
    )


class CommissionMeterInput(BaseModel):
    mpxn: Optional[str] = None
    chf_device_id: str = Field(alias="chfDeviceId")
    meter_device_id: str = Field(alias="meterDeviceId")
    installation_code: str = Field(alias="installationCode")
    meter_type: MeterTypeChoices = Field(alias="meterType")
    serial_number: Optional[str] = Field(alias="serialNumber", default=None)


class DecommissionSmartDeviceInput(BaseModel):
    device_id: str = Field(alias="deviceId")


class RegisterSmartDeviceInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    map_mpid: Optional[str] = Field(alias="mapMpid", default=None)
    supplier_mpid: str = Field(alias="supplierMpid")
    device_manufacturer: str = Field(alias="deviceManufacturer")
    device_model: str = Field(alias="deviceModel")
    device_type: str = Field(alias="deviceType")
    smets_chts_version: Optional[str] = Field(alias="smetsChtsVersion", default=None)
    install_code: str = Field(alias="installCode")
    esme_variant: Optional[str] = Field(alias="esmeVariant", default=None)
    serial_number: Optional[str] = Field(alias="serialNumber", default=None)
    firmware_version: Optional[str] = Field(alias="firmwareVersion", default=None)


class UpdateCommsHubStatusInput(BaseModel):
    chf_device_id: str = Field(alias="chfDeviceId")
    update_type: CommsHubStatusUpdateType = Field(alias="updateType")
    mpxn: Optional[str] = None
    chf_install_type: Optional[CHFInstallType] = Field(
        alias="chfInstallType", default=None
    )
    has_aerial_installed: Optional[bool] = Field(
        alias="hasAerialInstalled", default=None
    )
    chf_location: Optional[CHFLocation] = Field(alias="chfLocation", default=None)
    premise_type: Optional[PremiseType] = Field(alias="premiseType", default=None)
    has_metal_obstruction: Optional[bool] = Field(
        alias="hasMetalObstruction", default=None
    )
    has_connectivity_obstruction: Optional[bool] = Field(
        alias="hasConnectivityObstruction", default=None
    )
    has_shared_obstruction: Optional[bool] = Field(
        alias="hasSharedObstruction", default=None
    )
    fault_reason: Optional[CHFFaultReason] = Field(alias="faultReason", default=None)
    fault_return_type: Optional[CHFFaultReturnType] = Field(
        alias="faultReturnType", default=None
    )
    chf_connection_method: Optional[CHFConnectionMethod] = Field(
        alias="chfConnectionMethod", default=None
    )
    no_fault_return_type: Optional[CHFNoFaultReturnType] = Field(
        alias="noFaultReturnType", default=None
    )


class JoinConsumerDeviceInput(BaseModel):
    fuel_type: Optional[FuelTypeChoices] = Field(alias="fuelType", default=None)
    chf_device_id: str = Field(alias="chfDeviceId")
    consumer_device_id: str = Field(alias="consumerDeviceId")
    installation_code: Optional[str] = Field(alias="installationCode", default=None)
    consumer_device_type: JoinConsumerDeviceChoices = Field(alias="consumerDeviceType")


class RemoveConsumerDeviceInput(BaseModel):
    consumer_device_id: str = Field(alias="consumerDeviceId")
    consumer_device_type: RemoveConsumerDeviceChoices = Field(
        alias="consumerDeviceType"
    )


class SmartPrepayMeterAmountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")
    amount: int
    payment_intent_id: Optional[str] = Field(alias="paymentIntentId", default=None)
    is_temporary_credit: Optional[bool] = Field(alias="isTemporaryCredit", default=None)
    reason: Optional[str] = None


class RequestConsumptionDataInput(BaseModel):
    device_id: str = Field(alias="deviceId")
    start_at: Optional[Any] = Field(alias="startAt", default=None)
    end_at: Optional[Any] = Field(alias="endAt", default=None)


class ReplaceCommsHubInput(BaseModel):
    old_comms_hub_device_id: str = Field(alias="oldCommsHubDeviceId")
    new_comms_hub_device_id: str = Field(alias="newCommsHubDeviceId")


class CheckDeviceConnectionInput(BaseModel):
    device_id: str = Field(alias="deviceId")


class OccupyInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    quote_code: str = Field(alias="quoteCode")
    product_code: str = Field(alias="productCode")
    payment_day: Optional[int] = Field(alias="paymentDay", default=None)
    direct_debit_instruction: Optional[
        "DirectDebitInstructionLocalBankDetailsInput"
    ] = Field(alias="directDebitInstruction", default=None)
    users: Optional[List[Optional["AccountUserInput"]]] = None
    move_in_date: Optional[Any] = Field(alias="moveInDate", default=None)


class DirectDebitInstructionLocalBankDetailsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    account_holder: str = Field(alias="accountHolder")
    sort_code: str = Field(alias="sortCode")


class AccountUserInput(BaseModel):
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    email: str
    mobile: str
    opted_in_for_marketing: bool = Field(alias="optedInForMarketing")
    credit_score_data: Optional["CreditScoreData"] = Field(
        alias="creditScoreData", default=None
    )
    credit_score_fetched_at: Optional[Any] = Field(
        alias="creditScoreFetchedAt", default=None
    )
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth", default=None)
    psr_data: Optional["UpdateSpecialCircumstancesInput"] = Field(
        alias="psrData", default=None
    )
    roles: Optional[List[Optional[str]]] = None


class CreditScoreData(BaseModel):
    risk_bracket: str = Field(alias="riskBracket")
    score: int


class UpdateSpecialCircumstancesInput(BaseModel):
    additional_presence_preferred: Optional[bool] = Field(
        alias="additionalPresencePreferred", default=None
    )
    blind: Optional[bool] = None
    careline_telecare_system: Optional[bool] = Field(
        alias="carelineTelecareSystem", default=None
    )
    chronic_serious_illness: Optional[bool] = Field(
        alias="chronicSeriousIllness", default=None
    )
    dementia: Optional[bool] = None
    developmental_condition: Optional[bool] = Field(
        alias="developmentalCondition", default=None
    )
    elderly: Optional[bool] = None
    hearing_impairment: Optional[bool] = Field(alias="hearingImpairment", default=None)
    heart_lung_machine: Optional[bool] = Field(alias="heartLungMachine", default=None)
    kidney_dialysis: Optional[bool] = Field(alias="kidneyDialysis", default=None)
    mde_electric_showering: Optional[bool] = Field(
        alias="mdeElectricShowering", default=None
    )
    medicine_refrigeration: Optional[bool] = Field(
        alias="medicineRefrigeration", default=None
    )
    mental_health: Optional[bool] = Field(alias="mentalHealth", default=None)
    nebuliser: Optional[bool] = None
    oxygen_concentrator: Optional[bool] = Field(
        alias="oxygenConcentrator", default=None
    )
    oxygen_use: Optional[bool] = Field(alias="oxygenUse", default=None)
    partial_sighted: Optional[bool] = Field(alias="partialSighted", default=None)
    physical_impairment: Optional[bool] = Field(
        alias="physicalImpairment", default=None
    )
    poor_sense_of_smell: Optional[bool] = Field(alias="poorSenseOfSmell", default=None)
    restricted_hand_movement: Optional[bool] = Field(
        alias="restrictedHandMovement", default=None
    )
    restricted_movement: Optional[bool] = Field(
        alias="restrictedMovement", default=None
    )
    speech_impairment: Optional[bool] = Field(alias="speechImpairment", default=None)
    stair_lift: Optional[bool] = Field(alias="stairLift", default=None)
    water_dependent: Optional[bool] = Field(alias="waterDependent", default=None)
    families_with_young_children_5_or_under: Optional[bool] = Field(
        alias="familiesWithYoungChildren5OrUnder", default=None
    )
    families_with_young_children_5_or_under_end_date: Optional[str] = Field(
        alias="familiesWithYoungChildren5OrUnderEndDate", default=None
    )
    temporary_life_changes: Optional[bool] = Field(
        alias="temporaryLifeChanges", default=None
    )
    temporary_life_changes_end_date: Optional[str] = Field(
        alias="temporaryLifeChangesEndDate", default=None
    )
    temporary_post_hospital_recovery: Optional[bool] = Field(
        alias="temporaryPostHospitalRecovery", default=None
    )
    temporary_post_hospital_recovery_end_date: Optional[str] = Field(
        alias="temporaryPostHospitalRecoveryEndDate", default=None
    )
    temporary_young_adult_householder: Optional[bool] = Field(
        alias="temporaryYoungAdultHouseholder", default=None
    )
    temporary_young_adult_householder_end_date: Optional[str] = Field(
        alias="temporaryYoungAdultHouseholderEndDate", default=None
    )
    foreign_language_speaker: Optional[bool] = Field(
        alias="foreignLanguageSpeaker", default=None
    )
    language: Optional[str] = None
    use_password_to_identify: Optional[bool] = Field(
        alias="usePasswordToIdentify", default=None
    )
    partner_password: Optional[str] = Field(alias="partnerPassword", default=None)
    user_consent: Optional[bool] = Field(alias="userConsent", default=None)


class MoveOutInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    move_out_date: Any = Field(alias="moveOutDate")
    new_property: Optional["MoveInNewProperty"] = Field(
        alias="newProperty", default=None
    )
    new_tenant: Optional["MoveOutNewTenant"] = Field(alias="newTenant", default=None)


class MoveInNewProperty(BaseModel):
    address: str
    postcode: str
    move_in_date: Optional[str] = Field(alias="moveInDate", default=None)
    mpans: Optional[List[Optional[str]]] = None
    mprns: Optional[List[Optional[str]]] = None
    product_code: Optional[str] = Field(alias="productCode", default=None)
    quote_code: Optional[str] = Field(alias="quoteCode", default=None)
    move_in_new_property: Optional[bool] = Field(
        alias="moveInNewProperty", default=None
    )


class MoveOutNewTenant(BaseModel):
    given_name: Optional[str] = Field(alias="givenName", default=None)
    family_name: Optional[str] = Field(alias="familyName", default=None)
    email: Optional[str] = None
    mobile: Optional[str] = None
    role: Optional[str] = None


class CreateShellAccountInput(BaseModel):
    portfolio_number: Optional[str] = Field(alias="portfolioNumber", default=None)
    given_name: str = Field(alias="givenName")
    family_name: str = Field(alias="familyName")
    billing_name: Optional[str] = Field(alias="billingName", default=None)
    email: str
    mobile: Optional[str] = None
    landline: Optional[str] = None
    brand: Optional[str] = None
    date_of_birth: Optional[Any] = Field(alias="dateOfBirth", default=None)
    billing_address_line_1: Optional[str] = Field(
        alias="billingAddressLine1", default=None
    )
    billing_address_line_2: Optional[str] = Field(
        alias="billingAddressLine2", default=None
    )
    billing_address_line_3: Optional[str] = Field(
        alias="billingAddressLine3", default=None
    )
    billing_address_line_4: Optional[str] = Field(
        alias="billingAddressLine4", default=None
    )
    billing_address_line_5: Optional[str] = Field(
        alias="billingAddressLine5", default=None
    )
    billing_postcode: Optional[str] = Field(alias="billingPostcode", default=None)
    billing_rich_address: Optional[str] = Field(
        alias="billingRichAddress", default=None
    )
    billing_period_length: Optional[str] = Field(
        alias="billingPeriodLength", default=None
    )
    billing_period_multiplier: Optional[int] = Field(
        alias="billingPeriodMultiplier", default=None
    )
    billing_period_day: Optional[int] = Field(alias="billingPeriodDay", default=None)
    billing_period_month: Optional[int] = Field(
        alias="billingPeriodMonth", default=None
    )
    is_business_account: Optional[bool] = Field(alias="isBusinessAccount", default=None)
    company_name: Optional[str] = Field(alias="companyName", default=None)
    company_number: Optional[str] = Field(alias="companyNumber", default=None)
    business_type: Optional[str] = Field(alias="businessType", default=None)
    password: Optional[str] = None
    password_update_token: Optional[str] = Field(
        alias="passwordUpdateToken", default=None
    )
    urn: Optional[str] = None
    client_mutation_id: Optional[str] = Field(alias="clientMutationId", default=None)


class UpdateCommsDeliveryPreferenceInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    comms_delivery_preference: CommsDeliveryPreference = Field(
        alias="commsDeliveryPreference"
    )


class UpdateAccountBillingEmailInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    billing_email: Optional[str] = Field(alias="billingEmail", default=None)


class AddCampaignToAccountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    campaign: str
    start_date: Optional[Any] = Field(alias="startDate", default=None)
    expiry_date: Optional[Any] = Field(alias="expiryDate", default=None)


class RemoveCampaignFromAccountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    campaign_name: str = Field(alias="campaignName")


class AccountBillingAddressInput(BaseModel):
    account_number: Optional[str] = Field(alias="accountNumber", default=None)
    billing_address: Optional["BillingAddressDetailsInput"] = Field(
        alias="billingAddress", default=None
    )


class BillingAddressDetailsInput(BaseModel):
    street_address: Optional[str] = Field(alias="streetAddress", default=None)
    structured_street_address: Optional[Any] = Field(
        alias="structuredStreetAddress", default=None
    )
    dependent_locality: Optional[str] = Field(alias="dependentLocality", default=None)
    locality: Optional[str] = None
    postal_code: Optional[str] = Field(alias="postalCode", default=None)
    sorting_code: Optional[str] = Field(alias="sortingCode", default=None)
    delivery_point_identifier: Optional[str] = Field(
        alias="deliveryPointIdentifier", default=None
    )
    administrative_area: Optional[str] = Field(alias="administrativeArea", default=None)
    country: Optional[str] = None


class CreateAccountNoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    note: str
    is_pinned: bool = Field(alias="isPinned")


class RenewAgreementsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    quoted_product_id: str = Field(alias="quotedProductId")
    property_id: str = Field(alias="propertyId")
    make_full_debt_repayment: bool = Field(alias="makeFullDebtRepayment")
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate", default=None)
    change_on: Optional[Any] = Field(alias="changeOn", default=None)


class RenewAgreementForMeterPointInput(BaseModel):
    mpxn: str
    tariff_code: str = Field(alias="tariffCode")
    valid_from_date: Any = Field(alias="validFromDate")
    valid_to_date: Optional[Any] = Field(alias="validToDate", default=None)
    agreed_from_date: Optional[Any] = Field(alias="agreedFromDate", default=None)
    bespoke_tariff_rates: Optional["BespokeTariffRatesInput"] = Field(
        alias="bespokeTariffRates", default=None
    )
    bespoke_pps_tariff_rates: Optional[List[Optional["BespokePPSTariffRatesInput"]]] = (
        Field(alias="bespokePpsTariffRates", default=None)
    )
    commission: Optional["CommissionInput"] = None


class BespokeTariffRatesInput(BaseModel):
    standing_charge: Optional[Any] = Field(alias="standingCharge", default=None)
    unit_rate: Optional[Any] = Field(alias="unitRate", default=None)
    unit_rates: Optional[List[Optional["BespokeElectricityUnitRatesInput"]]] = Field(
        alias="unitRates", default=None
    )


class BespokeElectricityUnitRatesInput(BaseModel):
    unit_rate: Any = Field(alias="unitRate")
    rate_type: NonBespokeElectricityRateTypeChoices = Field(alias="rateType")


class BespokePPSTariffRatesInput(BaseModel):
    standing_charge: Optional[Any] = Field(alias="standingCharge", default=None)
    unit_rate: Optional[Any] = Field(alias="unitRate", default=None)
    unit_rates: Optional[List[Optional["BespokeElectricityUnitRatesInput"]]] = Field(
        alias="unitRates", default=None
    )
    payment_method: PaymentMethod = Field(alias="paymentMethod")


class CommissionInput(BaseModel):
    organization_name: str = Field(alias="organizationName")
    unit_rate_uplift: Any = Field(alias="unitRateUplift")
    standing_charge_uplift: Optional[Any] = Field(
        alias="standingChargeUplift", default=None
    )
    fixed_tpi_fee: Optional[int] = Field(alias="fixedTpiFee", default=None)
    affiliate_link_subdomain: Optional[str] = Field(
        alias="affiliateLinkSubdomain", default=None
    )


class RenewAgreementsForAccountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    electricity_agreements: Optional[List[Optional["AgreementRenewalProductInput"]]] = (
        Field(alias="electricityAgreements", default=None)
    )
    gas_agreements: Optional[List[Optional["AgreementRenewalProductInput"]]] = Field(
        alias="gasAgreements", default=None
    )
    change_on: Optional[Any] = Field(alias="changeOn", default=None)


class AgreementRenewalProductInput(BaseModel):
    agreement_id: str = Field(alias="agreementId")
    product_code: str = Field(alias="productCode")


class UpdateAccountSmartMeterInterestInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    smets_2_interest: SmartMeterInterestChoices = Field(alias="smets2Interest")
    smets_2_interest_source: Optional[SmartMeterInterestSourceChoices] = Field(
        alias="smets2InterestSource", default=None
    )
    smets_2_refusal_reason: Optional[SMETS2InterestReason] = Field(
        alias="smets2RefusalReason", default=None
    )


class StartSmartOnboardingProcessInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: Optional[str] = None
    mprn: Optional[str] = None
    product_code: str = Field(alias="productCode")
    is_new_account: Optional[bool] = Field(alias="isNewAccount", default=None)
    terms_and_conditions: Optional["TermsAndConditionsInput"] = Field(
        alias="termsAndConditions", default=None
    )
    target_agreement_change_date: Optional[Any] = Field(
        alias="targetAgreementChangeDate", default=None
    )


class TermsAndConditionsInput(BaseModel):
    version: str
    accepted: bool


class StartExportOnboardingProcessInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    import_mpan: Optional[str] = Field(alias="importMpan", default=None)
    export_mpan: Optional[str] = Field(alias="exportMpan", default=None)
    product_code: str = Field(alias="productCode")
    technology_type: ExportTechnologyType = Field(alias="technologyType")
    fit_status: FITStatus = Field(alias="fitStatus")
    include_fit_generation: Optional[bool] = Field(
        alias="includeFitGeneration", default=None
    )
    fit_id: Optional[str] = Field(alias="fitId", default=None)
    certificate: Optional["Certificate"] = None
    dno_status: DNOStatus = Field(alias="dnoStatus")
    terms_and_conditions_accepted: bool = Field(alias="termsAndConditionsAccepted")
    accepted_terms_and_conditions_version: Optional[str] = Field(
        alias="acceptedTermsAndConditionsVersion", default=None
    )


class Certificate(BaseModel):
    number: str
    type: CertificateType


class UpdateSsdInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    desired_ssd: Any = Field(alias="desiredSsd")


class CreateSiteworksEventInput(BaseModel):
    siteworks_request_id: str = Field(alias="siteworksRequestId")
    event_type: SiteworksEventType = Field(alias="eventType")
    field_services_data: Optional[Any] = Field(alias="fieldServicesData", default=None)
    references: Optional[Any] = None
    event_notes: Optional[str] = Field(alias="eventNotes", default=None)


class CreateOrUpdateSiteworksAppointmentInput(BaseModel):
    agent_id: str = Field(alias="agentId")
    appointment_reference: str = Field(alias="appointmentReference")
    appointment_date: Any = Field(alias="appointmentDate")
    status: AppointmentStatus
    work_type: Optional[str] = Field(alias="workType", default=None)
    fuel_type: FuelType = Field(alias="fuelType")
    mpan: Optional[str] = None
    mprn: Optional[str] = None
    electricity_supply_type: Optional[ElectricitySupplyType] = Field(
        alias="electricitySupplyType", default=None
    )
    gas_supply_type: Optional[GasSupplyType] = Field(
        alias="gasSupplyType", default=None
    )
    time_slot_start: Any = Field(alias="timeSlotStart")
    time_slot_end: Optional[Any] = Field(alias="timeSlotEnd", default=None)
    address: Optional["AddressInput"] = None
    is_emergency: Optional[bool] = Field(alias="isEmergency", default=None)
    engineer_name: Optional[str] = Field(alias="engineerName", default=None)
    status_reason: Optional[str] = Field(alias="statusReason", default=None)
    job_notes: Optional[str] = Field(alias="jobNotes", default=None)
    new_meter_category: Optional[NewMeterCategory] = Field(
        alias="newMeterCategory", default=None
    )
    electricity_meters: Optional[List[Optional["MeterInput"]]] = Field(
        alias="electricityMeters", default=None
    )
    gas_meters: Optional[List[Optional["MeterInput"]]] = Field(
        alias="gasMeters", default=None
    )
    future_payment_mode: Optional[PaymentMode] = Field(
        alias="futurePaymentMode", default=None
    )
    comms_strategy: Optional[CommsStrategy] = Field(alias="commsStrategy", default=None)


class AddressInput(BaseModel):
    address_line_1: Optional[str] = Field(alias="addressLine1", default=None)
    address_line_2: Optional[str] = Field(alias="addressLine2", default=None)
    address_line_3: Optional[str] = Field(alias="addressLine3", default=None)
    address_line_4: Optional[str] = Field(alias="addressLine4", default=None)
    address_line_5: Optional[str] = Field(alias="addressLine5", default=None)
    postcode: str


class MeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    status: Optional[MeterStatus] = None
    meter_type: Optional[str] = Field(alias="meterType", default=None)


class CancelSiteworksAppointmentInput(BaseModel):
    appointment_id: Optional[str] = Field(alias="appointmentId", default=None)
    agent_reference: Optional[str] = Field(alias="agentReference", default=None)
    cancellation_category: Optional[CancellationCategory] = Field(
        alias="cancellationCategory", default=None
    )
    cancellation_sub_category: Optional[str] = Field(
        alias="cancellationSubCategory", default=None
    )


class ConfirmSiteworksAppointmentSlotInput(BaseModel):
    property_id: str = Field(alias="propertyId")
    appointment_date: Any = Field(alias="appointmentDate")
    start_time: Any = Field(alias="startTime")
    end_time: Any = Field(alias="endTime")
    additional_information: Optional[str] = Field(
        alias="additionalInformation", default=None
    )
    agent_reference: Optional[str] = Field(alias="agentReference", default=None)
    site_id: Optional[str] = Field(alias="siteId", default=None)
    slot_id: Optional[str] = Field(alias="slotId", default=None)
    calculation_id: Optional[str] = Field(alias="calculationId", default=None)
    promise_id: Optional[str] = Field(alias="promiseId", default=None)
    comms_strategy: Optional[CommsStrategy] = Field(alias="commsStrategy", default=None)


class ReportRemovedMeterDetailsInput(BaseModel):
    appointment_id: Optional[str] = Field(alias="appointmentId", default=None)
    electricity_meter_point: Optional["RemovedElectricityMeterPointInput"] = Field(
        alias="electricityMeterPoint", default=None
    )
    gas_meter_point: Optional["RemovedGasMeterPointInput"] = Field(
        alias="gasMeterPoint", default=None
    )


class RemovedElectricityMeterPointInput(BaseModel):
    mpan: Optional[str] = None
    meters: Optional[List[Optional["RemovedElectricityMeterInput"]]] = None


class RemovedElectricityMeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    meter_type: Optional[ElectricityMeterTypes] = Field(alias="meterType", default=None)
    registers: List["RemovedElectricityMeterRegisterInput"]
    read_at: Optional[Any] = Field(alias="readAt", default=None)
    prepay_data: Optional["RemovedMeterPrepayDataInput"] = Field(
        alias="prepayData", default=None
    )


class RemovedElectricityMeterRegisterInput(BaseModel):
    id: str
    final_reading: float = Field(alias="finalReading")


class RemovedMeterPrepayDataInput(BaseModel):
    balance: Optional[int] = None
    cumulative_debt_balance: Optional[int] = Field(
        alias="cumulativeDebtBalance", default=None
    )
    emergency_credit_balance: Optional[int] = Field(
        alias="emergencyCreditBalance", default=None
    )


class RemovedGasMeterPointInput(BaseModel):
    mprn: Optional[str] = None
    meters: Optional[List[Optional["RemovedGasMeterInput"]]] = None


class RemovedGasMeterInput(BaseModel):
    serial_number: str = Field(alias="serialNumber")
    meter_type: Optional[GasMeterTypes] = Field(alias="meterType", default=None)
    final_reading: float = Field(alias="finalReading")
    read_at: Optional[Any] = Field(alias="readAt", default=None)
    prepay_data: Optional["RemovedMeterPrepayDataInput"] = Field(
        alias="prepayData", default=None
    )


class DirectDebitPaymentDayUpdateInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_day: int = Field(alias="paymentDay")


class UpdatePaymentSchedulePaymentDayInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_day: int = Field(alias="paymentDay")


class UpdatePaymentSchedulePaymentAmountInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    amount: int


class CreateDirectDebitInstructionInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    direct_debit_instruction: "DirectDebitInstructionLocalBankDetailsInput" = Field(
        alias="directDebitInstruction"
    )


class PaymentScheduleInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    payment_frequency: Optional[PaymentFrequency] = Field(
        alias="paymentFrequency", default=None
    )
    payment_amount: int = Field(alias="paymentAmount")
    payment_day: int = Field(alias="paymentDay")


class WarmHomeDiscountApplicationInputType(BaseModel):
    qualifying_criteria: Optional[QualifyingCriteriaOptions] = Field(
        alias="qualifyingCriteria", default=None
    )
    qualifying_component: Optional[CurrentQualifyingComponentOptions] = Field(
        alias="qualifyingComponent", default=None
    )


class ReadingInputType(BaseModel):
    register_id: Optional[str] = Field(alias="registerId", default=None)
    reading: Optional[int] = None


class AmendUnbilledReadingInput(BaseModel):
    reading_id: int = Field(alias="readingId")
    reading_value: int = Field(alias="readingValue")
    reading_datetime: Any = Field(alias="readingDatetime")


class SupplyPointMetadataInput(BaseModel):
    identifier: str
    key: str
    value: Any


class CreateAutoTopupConfigInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")
    topup_amount: int = Field(alias="topupAmount")


class DisableAutoTopupInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    device_id: str = Field(alias="deviceId")


class CreateQuoteInput(BaseModel):
    postcode: str
    electricity_meter_points: Optional[
        List[Optional["ElectricityMeterPointConsumptionInput"]]
    ] = Field(alias="electricityMeterPoints", default=None)
    gas_meter_points: Optional[List[Optional["GasMeterPointConsumptionInput"]]] = Field(
        alias="gasMeterPoints", default=None
    )
    position: Optional["PositionInput"] = None
    gsp_group_id: Optional[str] = Field(alias="gspGroupId", default=None)
    affiliate_session_id: Optional[str] = Field(
        alias="affiliateSessionId", default=None
    )
    affiliate_organisation_id: Optional[str] = Field(
        alias="affiliateOrganisationId", default=None
    )
    restrict_to_affiliate_products: Optional[bool] = Field(
        alias="restrictToAffiliateProducts", default=None
    )
    brand_code: str = Field(alias="brandCode")
    address: Optional["QuoteAddressInput"] = None
    is_business: Optional[bool] = Field(alias="isBusiness", default=None)
    has_consented_to_industry_data_search: Optional[bool] = Field(
        alias="hasConsentedToIndustryDataSearch", default=None
    )
    payment_method: Optional[QuotePaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )


class PositionInput(BaseModel):
    latitude: Optional[float] = None
    longitude: Optional[float] = None


class QuoteAddressInput(BaseModel):
    address_line_1: Optional[str] = Field(alias="addressLine1", default=None)
    address_line_2: Optional[str] = Field(alias="addressLine2", default=None)
    address_line_3: Optional[str] = Field(alias="addressLine3", default=None)


class RefreshQuoteInput(BaseModel):
    code: str


class RequoteInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    property_id: str = Field(alias="propertyId")
    product_available_at: Optional[Any] = Field(
        alias="productAvailableAt", default=None
    )
    include_hidden_products: Optional[bool] = Field(
        alias="includeHiddenProducts", default=None
    )
    persist_flat_rate: Optional[bool] = Field(alias="persistFlatRate", default=None)
    payment_method: Optional[QuotePaymentMethodChoices] = Field(
        alias="paymentMethod", default=None
    )


class BillToLatestSmartMeterSnapshotInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    mpan: str


class SwitchMeterPointProductsInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    meter_point_switch_contexts: List["MeterPointSwitchContext"] = Field(
        alias="meterPointSwitchContexts"
    )
    update_payment_amount: Optional[bool] = Field(
        alias="updatePaymentAmount", default=None
    )


class MeterPointSwitchContext(BaseModel):
    mpxn: str
    quoted_product_id: str = Field(alias="quotedProductId")
    change_on: Optional[Any] = Field(alias="changeOn", default=None)
    commission: Optional["CommissionInput"] = None
    flat_rate: Optional[bool] = Field(alias="flatRate", default=None)


class CreateElectricJuiceChargeInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    charge_card_uid: Optional[str] = Field(alias="chargeCardUid", default=None)
    period_start_at: Any = Field(alias="periodStartAt")
    period_end_at: Any = Field(alias="periodEndAt")
    net_amount: int = Field(alias="netAmount")
    charge_provider: str = Field(alias="chargeProvider")
    postcode: str
    kwh_used: Any = Field(alias="kwhUsed")
    price_per_kwh: Any = Field(alias="pricePerKwh")
    additional_fees: int = Field(alias="additionalFees")


class CreateElectricJuiceCreditInput(BaseModel):
    account_number: str = Field(alias="accountNumber")
    net_amount: int = Field(alias="netAmount")
    gross_amount: int = Field(alias="grossAmount")
    tax_amount: int = Field(alias="taxAmount")
    note: Optional[str] = None
    reason: AccountCreditReasonType


CreateCampaignItemsInput.model_rebuild()
QuoteShareInput.model_rebuild()
SetUpDirectDebitInstructionInput.model_rebuild()
BackendScreenEventInput.model_rebuild()
LeaveSupplierInput.model_rebuild()
LeaveSupplierMarketInputType.model_rebuild()
UpdateLeaveSupplierInput.model_rebuild()
PrepareAccountInput.model_rebuild()
CustomerDetailsInput.model_rebuild()
EnrollmentInput.model_rebuild()
PaymentScheduleDetailsInput.model_rebuild()
UpdateExtraDetailsInput.model_rebuild()
CreateInkInboundMessageInput.model_rebuild()
InkMessageInput.model_rebuild()
InkGenericMessageInput.model_rebuild()
InkEmailMessageInput.model_rebuild()
InkPostMessageInput.model_rebuild()
CreateGoodsQuoteInput.model_rebuild()
CreateGoodsQuoteWithoutAccountInput.model_rebuild()
CreatePurchaseInput.model_rebuild()
UpdatePurchaseInput.model_rebuild()
UpdateUserInput.model_rebuild()
CreateExternalAccountEventInput.model_rebuild()
CreateExternalAccountUserEventInput.model_rebuild()
TransferLedgerBalanceInputType.model_rebuild()
SetZoneSchedulesParameters.model_rebuild()
ZoneSchedule.model_rebuild()
FlowTemperatureInput.model_rebuild()
TemperatureRangeInput.model_rebuild()
AcceptTermsAndConditionsInput.model_rebuild()
ReauthenticateDeviceInput.model_rebuild()
DeviceRegistrationInput.model_rebuild()
SmartFlexDevicePreferencesInput.model_rebuild()
UtilityFiltersInput.model_rebuild()
FitMeterReadingInput.model_rebuild()
FitInstallationInput.model_rebuild()
FitMeterInput.model_rebuild()
CreateHeatPumpGoodsQuoteInput.model_rebuild()
PostEVPublicChargingChargeInput.model_rebuild()
PostEVPublicChargingAccountChargeInput.model_rebuild()
CreateInkChatbotMessageInput.model_rebuild()
CreateProductRatesInputType.model_rebuild()
QuoteNewMeterPointsInput.model_rebuild()
ElectricityMeterPointInput.model_rebuild()
GasMeterPointInput.model_rebuild()
QuoteNewMeterPointsOnBespokeProductsInput.model_rebuild()
ElectricityMeterPointProductsInput.model_rebuild()
ElectricityProductInput.model_rebuild()
GasMeterPointProductsInput.model_rebuild()
GasProductInput.model_rebuild()
QuoteAccountOnProductsInput.model_rebuild()
CreateAcquisitionQuoteRequestForProductsInput.model_rebuild()
OccupyInput.model_rebuild()
AccountUserInput.model_rebuild()
MoveOutInput.model_rebuild()
AccountBillingAddressInput.model_rebuild()
RenewAgreementForMeterPointInput.model_rebuild()
BespokeTariffRatesInput.model_rebuild()
BespokePPSTariffRatesInput.model_rebuild()
RenewAgreementsForAccountInput.model_rebuild()
StartSmartOnboardingProcessInput.model_rebuild()
StartExportOnboardingProcessInput.model_rebuild()
CreateOrUpdateSiteworksAppointmentInput.model_rebuild()
ReportRemovedMeterDetailsInput.model_rebuild()
RemovedElectricityMeterPointInput.model_rebuild()
RemovedElectricityMeterInput.model_rebuild()
RemovedGasMeterPointInput.model_rebuild()
RemovedGasMeterInput.model_rebuild()
CreateDirectDebitInstructionInput.model_rebuild()
CreateQuoteInput.model_rebuild()
SwitchMeterPointProductsInput.model_rebuild()
MeterPointSwitchContext.model_rebuild()
